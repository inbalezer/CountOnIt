@page "/ProfilePage/{userID:int}"
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using CountOnIt.Client.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager Nav
@inject DateService DateService
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@if (onInitializedOver)
{
    <div id="topOptBar">
        <button class="backArrow" @onclick="goToFormerPage"><img src="../css/images/back-repeated.svg" /></button>
        <h3>הפרופיל של @currentUser.firstName @currentUser.lastName</h3>
        <div class="outerOptions">
            <button class="optionButton editButton" @onclick="editProfile">
                <img src="../css/images/edit_pencil.svg" class="icon" />
                עריכה
            </button>
        </div>
        <div id="mainUserInfo">
            @if (editBtnClicked)
            {
                <div>
                    <div>שם פרטי:</div><br />
                    <input type="text" maxlength="15" @oninput="firstNameLengthCheck" placeholder="@currentUser.firstName" />
                    @if (newFirstNameLength > 0)
                    {
                        <span>@newFirstNameLength/15</span>
                    }
                    else
                    {
                        <span style="color:red">@newFirstNameLength/15</span>
                    }
                    <div>שם משפחה:</div>
                    <input type="text" maxlength="15" @oninput="lastNameLengthCheck" placeholder="@currentUser.lastName" />
                    @if (newLastNameLength > 0)
                    {
                        <span>@newLastNameLength/15</span>
                    }
                    else
                    {
                        <span style="color:red">@newLastNameLength/15</span>
                    }
                </div>
                <div class="keyBoardAndBtn">
                    <div class="outerCancleAndEmoji">
                        @if (currentUser.profilePicOrIcon.Length > 0)
                        {
                            <button @onclick="ToggleKeyboard" id="emoji-trigger" class="hideDefaultEmojiBtn"><img src="../css/images/add emoji (1).svg" /></button>
                        }
                        else if (isCancleBtnClicked)
                        {
                            <button @onclick="ToggleKeyboard" id="emoji-trigger"><img src="../css/images/add emoji (1).svg" /></button>
                        }
                        else
                        {
                            <button @onclick="ToggleKeyboard" id="emoji-trigger" class="@hideBtn"><img src="../css/images/add emoji (1).svg" /></button>
                        }
                        @if (noEmojiBtn || currentUser.profilePicOrIcon.Length > 0)
                        {

                            <div class="outerCancleAndEmoji">
                                <button @onclick="deleteSelectedEmoji" class="cancleEmoji">ביטול בחירה</button>
                                <button @onclick="ToggleKeyboard" class="selectedEmoji">
                                    <span class="emoji">@currentUser.profilePicOrIcon</span>
                                    <img src="../css/images/+ icon.svg" class="plusIcon" />
                                </button>
                            </div>

                        }
                    </div>


                    <div class="emoji-keyboard @visibilityClass">
                        <div class="emoji-categories">
                            @foreach (var category in emojiCategories.Keys)
                            {
                                <button class="category-button @(selectedCategory == category ? "active" : "")"
                            @onclick="() => SelectCategory(category)">
                                    @category
                                </button>
                            }
                        </div>
                        <div class="emoji-section">

                            <div @onclick="() => SelectEmoji(currentUser.profilePicOrIcon)" class="emoji">@currentUser.profilePicOrIcon</div>

                        </div>
                    </div>

                </div>
            }
            else
            {
                <div>@currentUser.profilePicOrIcon</div>
                <div>@currentUser.firstName @currentUser.lastName</div>

                <AuthorizeView>
                    <Authorized>
                        <div>@context.User.Identity.Name</div>
                    </Authorized>
                </AuthorizeView>

                <br />
                <button @onclick="goToStreakPage">צפייה בהתקדמות שלי</button>


            }

        </div>
    </div>
    <div>
        <div>יום תחילת תזרים:</div>
        <div>
            <div>
                @if (startMonthDate > 0)
                {
                    <span> ה - @startMonthDate לחודש</span>
                }
                else
                {
                    <span> ה - @currentUser.monthStartDate לחודש</span>
                }
            </div>
            @if (editBtnClicked)
            {
                <div>
                    <button class="dropDownOptionBtn" @onclick="@(()=>startMonthDate=1)">ה-1 לחודש</button>
                    <div class="divider"></div>
                    <button class="dropDownOptionBtn" @onclick="@(()=>startMonthDate=2)">ה-2 לחודש</button>
                    <div class="divider"></div>
                    <button class="dropDownOptionBtn" @onclick="@(()=>startMonthDate=10)">ה-10 לחודש</button>
                    <div class="divider"></div>
                    <button class="dropDownOptionBtn" @onclick="@(()=>startMonthDate=15)">ה-15 לחודש</button>
                </div>
            }
        </div>
    </div>
    <div>
        <div>תאריך הרשמה:</div>

        <div>@currentUser.signUpDate.ToString("dd/MM/yyyy")</div>
    </div>
    <div>
        <div>התגיות שלי</div>
        <div>
            @if (editBtnClicked)
            {
                <button @onclick="openEditOrAddTagOverlay">הוספת תגית</button>
                <br />
            }
        </div>
        <div class="outerGalleryAndNav">
            <div class="outerGallery">

                @if (currentUser.userTags.Count > 0)
                {
                    foreach (TagsToShow tag in currentUser.userTags)
                    {
                        var fontWeight = (chosenTag == tag) ? "font-weight: 600;" : "";
                        <button class="tag"
                    @onclick="(() => ChooseTagForTrans(tag))"
                    style="background-color:@tag.tagColor; @fontWeight">
                            @tag.tagTitle
                        </button>
                        @if (editBtnClicked)
                        {
                            <button class="options" @onclick="()=>OptionsBtnClicked=!OptionsBtnClicked"><img src="../css/images/option menu.svg" /></button>
                        }

                    }

                    if (OptionsBtnClicked)
                    {
                        <OptionsMenuComponent editBtnClicked="openEditOrAddTagOverlay" deleteBtnClicked="callDeleteWarning" closeOverlay="()=>openDeleteTagWarning(true)"></OptionsMenuComponent>
                    }


                    <div class="outerBtnAndDots">
                        <button class="galleryArrow @disBtnStyle" @onclick="PreviousPage"><img src="../css/images/arrow-back.svg" /></button>
                        <div class="pageDots">
                            @for (int i = 0; i < totalPages; i++)
                            {
                                <span class="dot @(i == currentPage ? "active" : "")"></span>
                            }
                        </div>
                        <button class="galleryArrow @disNextBtnStyle" @onclick="NextPage"><img src="../css/images/arrow-next.svg" /></button>

                    </div>
                }

            </div>
        </div>
    </div>
}


<div>
    @if (editBtnClicked)
    {
        <br />
        <button @onclick="(()=>saveEditedProfile(currentUser))">שמירה וחזרה</button>
    }
    else
    {
        <div>מעבר מחדש על ההדרכה</div>
        <div>
            <button class="dropDownOptionBtn">סביבת ‘מבט אל העבר’</button>
            <div class="divider"></div>
            <button class="dropDownOptionBtn">סביבת ‘מבט אל ההווה’</button>
            <div class="divider"></div>
            <button class="dropDownOptionBtn">סביבת ‘מבט אל העתיד’</button>
        </div>
        <br />
        <button @onclick="BeginSignOut">התנתקות מהמערכת</button>
    }

</div>

@if (editTag)
{
    <div>
        @if (tagToEdit.id > 0)
        {
            <h3>עריכת תגית</h3>
            <div>שם התגית:</div>
            <input type="text" placeholder="@chosenTag.tagTitle" @oninput="tagTitleLengthCheck" maxlength="8" />
            @if (tagTitleInputLength == 0)
            {
                <span>@chosenTag.tagTitle.Length/8</span>
            }
            else
            {
                <span>@tagTitleInputLength/8</span>
            }

        }
        else
        {
            <h3>הוספת תגית</h3>
            <div>שם התגית:</div>
            <input type="text" @oninput="tagTitleLengthCheck" maxlength="8" />
            @if (tagToEdit.tagTitle.Length <= 0)
            {
                <span style="color:red">@tagTitleInputLength/8</span>
            }
            else
            {
                <span>@tagTitleInputLength/8</span>
            }

        }
        <div>
            <div>צבע התגית:</div>
            <div class="outerColors">

                <div class="colorsContainer">
                    <div class="colorsRow">
                        @foreach (var color in new[] { "#F4B367", "#AEA2F9", "#F467AB", "#F47867", "#6775F4", "#8DE4BF" })
                        {
                            <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                               @onclick="() => UpdateColor(color)" />

                            </div>
                        }
                    </div>
                    <div class="colorsRow">
                        @foreach (var color in new[] { "#67CAF4", "#FCE884", "#F9D3C2", "#16A78D", "#696969", "#DADADA" })
                        {
                            <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                               @onclick="() => UpdateColor(color)" />

                            </div>
                        }
                    </div>
                </div>
            </div>
            <br />
        </div>

        @if (tagToEdit.id > 0)
        {
            if (tagToEdit.tagTitle.Length > 0 && tagToEdit.tagColor.Length > 0)
            {
                <button @onclick="updateTag">שמירה וסיום</button>
            }
            else
            {
                 <button @onclick="updateTag" disabled>שמירה וסיום</button>
            }
            
        }
        else
        {
            if (tagToEdit.tagTitle.Length > 0 && tagToEdit.tagColor.Length > 0)
            {
                <button @onclick="addTag">שמירה וסיום</button>
            }
            else
            {
                <button @onclick="addTag" disabled>שמירה וסיום</button>
            }

        }

    </div>
}


@if (deleteTagWarning)
{

    string msg = "התגית " + @chosenTag.tagTitle + " עומדת להמחק.";

    <GeneralPopUpComponent popupTypeTitle="מחיקת תגית" middleText="@msg" action="מחיקה" makeAction="deleteTag" closePopUp="closeDeleteWarning"></GeneralPopUpComponent>
}


@code {
    [Parameter]
    public int userID { get; set; }


    bool onInitializedOver = false;
    userProfileDataToShow currentUser = new userProfileDataToShow();


    public bool editBtnClicked = false;
    public bool closeOverlay = false;

    public int startMonthDate = 0;
    string newFirstName = "";
    string newLastName = "";


    //Tag gallery variables:
    TagsToShow chosenTag = new TagsToShow();
    bool disBtn = false;
    bool disNextBtn = false;
    bool isTagChosen = false;
    string disBtnStyle => disBtn ? "disBtn" : "";
    string disNextBtnStyle => disNextBtn ? "disBtn" : "";
    string chosenTagStyle => isTagChosen ? "chosenTag" : "";

    private int currentPage = 0;
    private int pageSize = 6;
    private int totalPages => (int)Math.Ceiling(currentUser.userTags.Count / (double)pageSize);

    //Emoji keyboard:
    private bool isVisible = false;
    bool isCancleBtnClicked = false;
    string hideBtn = "";
    bool noEmojiBtn = false;
    private Dictionary<string, List<string>> emojiCategories = new Dictionary<string, List<string>>
    {
        {"כללי", new List<string> {
                "🏠", "🛏️", "🚿", "💡", "📞", "🖥️", "🚗", "🚌", "🛒", "🍲",
                "🏥", "💊", "👕", "🧹", "🧺", "🍼", "🐶", "🧑‍🔧", "📚", "🧾",
                "🕶️", "🌂", "🔑", "📦"
            }},
        {"כיף", new List<string> {
                "🎭", "🎟️", "🎮", "🎨", "📸", "🍽️", "🏋️‍♂️", "🧘", "🎸", "✈️",
                "🏕️", "🛍️", "🍷", "🎁", "🎈", "📖", "🍰", "🌐", "🕹️", "🚤",
                "🚵", "🛀", "🎷", "🎙️"
            }},
        {"פיננסי", new List<string> {
             "💳",
        "🏦", "💰", "🪙", "💸", "💹",
        "📈", "📉", "📊", "💲", "🏧",
        "🧾", "💱", "💲", "💹", "🏦",
        "🖋️", "💎", "📜", "🏧",
        "📅", "🖥️", "🖨️", "🔍"
            }}
    };

    private string visibilityClass => isVisible ? "visible" : "";
    private string selectedCategory = "כללי";

    public bool editTag = false;
    TagsToShow tagToEdit = new TagsToShow();
    string selectedClass = "";
    bool deleteTagWarning = false;
    bool OptionsBtnClicked = false;

    int tagTitleInputLength = 0;


    //------

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/Present/userProfileData/" + userID);
        if (userRes.IsSuccessStatusCode)
        {
            currentUser = await userRes.Content.ReadFromJsonAsync<userProfileDataToShow>();

            switch (currentUser.monthStartDate)
            {
                case 1:
                    startMonthDate = 1;
                    break;
                case 2:
                    startMonthDate = 2;
                    break;
                case 10:
                    startMonthDate = 10;
                    break;
                case 15:
                    startMonthDate = 15;
                    break;
            }
            newFirstNameLength = currentUser.firstName.Length;
            newLastNameLength = currentUser.lastName.Length;
         
            onInitializedOver = true;
        }
    }


    public async Task goToFormerPage()
    {

        if (!editBtnClicked)
        {
            await JSRuntime.InvokeVoidAsync("navigateBack");
        }
    }



    public void ChooseTagForTrans(TagsToShow tag)
    {
        isTagChosen = !isTagChosen;

        if (chosenTag == tag)
        {
            chosenTag = new TagsToShow(); // Unselect the tag

        }
        else
        {
            chosenTag = tag; // Set the new selected tag
        }

    }

    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            disNextBtn = false;
            disBtn = false;
            currentPage--;
        }
        if (currentPage == 0)
        {
            disBtn = true;
        }

    }

    private void NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            disBtn = false;
            disNextBtn = false;
            currentPage++;
        }
        if (currentPage == totalPages - 1)
        {
            disNextBtn = true;
        }
    }
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Nav.NavigateTo($"authentication/logout");
    }


    public void editProfile()
    {
        editBtnClicked = !editBtnClicked;

    }
    private void ToggleKeyboard()
    {
        isVisible = !isVisible;
    }

    private void deleteSelectedEmoji()
    {
        isCancleBtnClicked = true;
        noEmojiBtn = false;

        currentUser.profilePicOrIcon = "";
        hideBtn = "";
    }

    private void SelectEmoji(string emoji)
    {
        noEmojiBtn = true;
        isCancleBtnClicked = false;
        hideBtn = "hideDefaultEmojiBtn";
        currentUser.profilePicOrIcon = emoji;
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    public async Task saveEditedProfile(userProfileDataToShow updatedUser)
    {
        if (startMonthDate > 0)
        {
            updatedUser.monthStartDate = startMonthDate;
        }
        if (newFirstName != "" && newFirstName != currentUser.firstName)
        {
            currentUser.firstName = newFirstName;
        }
        if (newLastName != "" && newLastName != currentUser.lastName)
        {
            currentUser.lastName = newLastName;
        }
        var updateUserRec = await Http.PostAsJsonAsync("api/Present/updateUser", updatedUser);
        if (updateUserRec.IsSuccessStatusCode)
        {
            Console.WriteLine("updated user data");
            var tagsToDeleteRes = updateUserRec.Content.ReadFromJsonAsync<List<int>>().Result;

            int deletedTagsCounter = 0;
            foreach (int tagIDtoDelete in tagsToDeleteRes)
            {
                var deleteTagsRec = await Http.DeleteAsync("api/Present/deleteTags/" + tagIDtoDelete);
                if (deleteTagsRec.IsSuccessStatusCode)
                {
                    deletedTagsCounter++;
                }
            }
            if (deletedTagsCounter == tagsToDeleteRes.Count)
            {
                editBtnClicked = false;
            }
            else
            {
                Console.WriteLine("not all tags were successfully deleted");
            }
        }
    }

    public void openEditOrAddTagOverlay()
    {
        editTag = !editTag;
        if (chosenTag.id > 0)
        {
            tagToEdit.id = chosenTag.id;
        }
        else
        {
            tagToEdit = new TagsToShow();
            tagToEdit.id = 0;
        }
        Console.WriteLine("Tag to edit data- " + tagToEdit.id + ", " + tagToEdit.tagTitle);
    }

    private void UpdateColor(string color)
    {

        if (selectedClass == color)
        {
            // If the color is already selected, unselect it
            selectedClass = ""; // Reset the selected color
            tagToEdit.tagColor = ""; // Assuming you want to clear the selected color
        }
        else
        {
            // Otherwise, update to the new selected color
            tagToEdit.tagColor = color;
            selectedClass = color;
        }
    }

    public void updateTag()
    {
        int editedTag = currentUser.userTags.IndexOf(chosenTag);
        currentUser.userTags[editedTag].id = tagToEdit.id;
        currentUser.userTags[editedTag].tagTitle = tagToEdit.tagTitle;
        currentUser.userTags[editedTag].tagColor = tagToEdit.tagColor;
        tagToEdit = new TagsToShow();
        OptionsBtnClicked = !OptionsBtnClicked;

    }

    public void addTag()
    {
        currentUser.userTags.Add(tagToEdit);
        tagToEdit = new TagsToShow();
        OptionsBtnClicked = !OptionsBtnClicked;
    }

    public void openDeleteTagWarning(bool optStatus)
    {
        deleteTagWarning = !optStatus;
    }

    public void closeDeleteWarning()
    {
        openDeleteTagWarning(true);
    }

    public void callDeleteWarning()
    {
        deleteTagWarning = true;
    }

    public void deleteTag()
    {
        Console.WriteLine("delete clicked, tag title- " + chosenTag.tagTitle);
        for (int i = currentUser.userTags.Count - 1; i > -1; i--)
        {
            if (currentUser.userTags[i] == chosenTag)
            {
                currentUser.userTags.Remove(currentUser.userTags[i]);
            }
        }
        openDeleteTagWarning(true);
        OptionsBtnClicked = !OptionsBtnClicked;
    }

    private void tagTitleLengthCheck(ChangeEventArgs e)
    {
        tagToEdit.tagTitle = e.Value.ToString();
        tagTitleInputLength = tagToEdit.tagTitle.Length;

    }

    int newFirstNameLength = 0;
    int newLastNameLength = 0;
    private void firstNameLengthCheck(ChangeEventArgs e)
    {
        newFirstName = e.Value.ToString();
        newFirstNameLength = newFirstName.Length;
    }

    private void lastNameLengthCheck(ChangeEventArgs e)
    {
        newLastName = e.Value.ToString();
        newLastNameLength = newLastName.Length;
    }

    public void goToStreakPage()
    {
        Nav.NavigateTo("./StreakProgressPage/" + userID);
    }
}
