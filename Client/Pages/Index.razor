@page "/homePage"
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using CountOnIt.Client.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager Nav
@inject DateService DateService
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<meta name="google-signin-client_id" content="1019975699349-h4jb6mru41g9tobof0f2i4dl96df2bkp.apps.googleusercontent.com">
<div class="g-signin2" data-onsuccess="onSignIn"></div>

@if (currentUser != null)
{
    <h1>היי @currentUser.firstName 👋🏼</h1>

    <h2>מבט על חודש @currentMonth </h2>

    //שורת חיפוש

    <table class="table">
        <thead>
            <tr>
                <th>ניצלתי</th>
                <th>הכנסתי</th>
                <th>הוצאתי</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@currentUser.budgetFullValue% </td>
                <td>@currentUser.incomeValueFullList</td>
                <td>@currentUser.spendingValueFullList</td>

            </tr>
        </tbody>
    </table>


    <button>מצב החודש כרגע</button>
    <label>מעבר בין הכנסות/הוצאות:</label>
    <input type="checkbox" @bind="isChecked" />
    @<label>הוצאות</label>@

    @if (isChecked) // עובר להכנסות
    {
        <p>הכנסות</p>



    }
    else
    {
        <p>הוצאות</p>

        <button>הוספת קטגוריה חדשה</button>

        foreach (CategoryToShow category in currentUser.categoriesFullList)
        {

            <CategoryComponent Category=category categoryTitle="category.categroyTitle" doRefresh="@doRefresh"> </CategoryComponent>

        }

        @if (doRefresh)
        {
            refreshBudgetsOfSubCats(true);
        }
    }
    <div id="bottomNav">
        <button>מבט לעבר</button>
        <button>מבט להווה</button>
        <button>מבט לעתיד</button>
    </div>
}

@if (currentUser == null)
{

    <input type="text" @bind=newUser.firstName placeholder=" שם פרטי:" />
    <input type="text" @bind=newUser.lastName placeholder=" שם משפחה:" />
    <button @onclick=createNewUser>שמירה</button>

}


@code{


    userToShow currentUser;
    UserToAdd newUser = new UserToAdd();
    //List<CategoryToShow> categoriesList;

    private string currentMonth;
    private bool isChecked = false;
    private string userGoogleId;
    string msg = "";
    bool doRefresh = false;



    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1); // This is just to simulate an async process.

        int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        currentMonth = GetHebrewMonthName(currentMonthNumber);
        StateHasChanged();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userGoogleId = user.FindFirst("sub")?.Value;

            var userRes = await Http.GetAsync("api/Present/userToShow/" + userGoogleId);

            if (userRes.IsSuccessStatusCode)
            {
                currentUser = userRes.Content.ReadFromJsonAsync<userToShow>().Result;
            }
            else
            {
                string error = userRes.Content.ReadAsStringAsync().Result;
                switch (error)
                {
                    case "User Not Found":
                        msg = "User not found ";
                        break;
                }

            }
        }
        else
        {
            msg = "user not authenticated";
        }
    }


    private string GetHebrewMonthName(int monthNumber)
    {
        switch (monthNumber)
        {
            case 1:
                return "ינואר";
            case 2:
                return "פברואר";
            case 3:
                return "מרץ";
            case 4:
                return "אפריל";
            case 5:
                return "מאי";
            case 6:
                return "יוני";
            case 7:
                return "יולי";
            case 8:
                return "אוגוסט";
            case 9:
                return "ספטמבר";
            case 10:
                return "אוקטובר";
            case 11:
                return "נובמבר";
            case 12:
                return "דצמבר";
            default:
                return "חודש לא תקין"; // Handle invalid month numbers
        }
    }


    public void refreshBudgetsOfSubCats(bool refreshBudget)
    {
        if (refreshBudget)
        {
            doRefresh = refreshBudget;
            Nav.NavigateTo("./", true);
        }
    }




    public async Task createNewUser()
    {

        var newUserRes = await Http.PostAsJsonAsync("api/Google/AddUser/" + userGoogleId, newUser);

        if (newUserRes.IsSuccessStatusCode)
        {

            Console.WriteLine("בסוף עבד הקקה");
        }

        else
        {
            msg = "Error adding new user";
        }
    }
}