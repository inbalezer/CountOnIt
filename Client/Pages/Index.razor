@page "/homePage"
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using CountOnIt.Client.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager Nav
@inject DateService DateService
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<meta name="google-signin-client_id" content="1019975699349-h4jb6mru41g9tobof0f2i4dl96df2bkp.apps.googleusercontent.com">
<div class="g-signin2" data-onsuccess="onSignIn"></div>

@if (currentUser != null)
{
    <h1>היי @currentUser.firstName 👋🏼</h1>

    <h2>מבט על חודש @currentMonth </h2>

    <div class="search__container">

        <input type="text" value="@searchQuery" @oninput="UpdateSearchQuery" @onkeyup="HandleKeyUp" placeholder="חפשו קטגוריה או תת קטגוריה..." />
        
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>ניצלתי</th>
                <th>הכנסתי</th>
                <th>הוצאתי</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@currentUser.budgetFullValue% </td>
                <td>@currentUser.incomeValueFullList</td>
                <td>@currentUser.spendingValueFullList</td>

            </tr>
        </tbody>
    </table>


    <button>מצב החודש כרגע</button>
    <label>מעבר בין הכנסות/הוצאות:</label>
    <input type="checkbox" @bind="isChecked" />


    @if (isChecked) // עובר להכנסות
    {
        <p>הכנסות</p>
    }
    else
    {
        <p>הוצאות</p>

        <button @onclick="openCategoryOverlay">הוספת קטגוריה חדשה</button>
        @if (openAddCatOverlay)
        {
            <EditCategoryComponent popupTitle="הוספת קטגוריה" userID="@userID" newCategory="newCategory" isCategoryOverlayOpen="openCategoryOverlay" addNewCatToIndex="AddNewCat"></EditCategoryComponent>
        }


        @if (currentUser.categoriesFullList.Any(c => string.IsNullOrEmpty(searchQuery) || c.categroyTitle.ToLower().Contains(searchQuery.ToLower())))
        {
            @foreach (CategoryToShow category in currentUser.categoriesFullList.Where(c => string.IsNullOrEmpty(searchQuery) || c.categroyTitle.ToLower().Contains(searchQuery.ToLower())))
            {
                categoryIdToSend = category.id;
                if (category.id == givingsubCatCategoryID)
                {
                    <CategoryComponent Category=category categoryTitle="category.categroyTitle" icon="category.icon" categoryColor="category.color" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget" givingSubCat="givingSubCatToUpdate"></CategoryComponent>
                }
                else
                {
                    <CategoryComponent Category=category categoryTitle="category.categroyTitle" icon="category.icon" categoryColor="category.color" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget"></CategoryComponent>
                }
            }

        }
        else
        {

            <p>אופס, לא נמצא תוצאה שמתאימה לחיפוש</p>
        }


        @if (finalsearchSubCats.Any(sb => string.IsNullOrEmpty(searchQuery) || sb.subCategoryTitle.ToLower().Contains(searchQuery.ToLower())))
        {
            @foreach (SubCategoryToAdd subCatsToSearch in finalsearchSubCats.Where(sb => string.IsNullOrEmpty(searchQuery) || sb.subCategoryTitle.ToLower().Contains(searchQuery.ToLower())))
            {
                @foreach (CategoryToShow category in currentUser.categoriesFullList)
                {
                    if (subCatsToSearch.categoryID == category.id)
                    {
                        <CategoryComponent Category=category categoryTitle="category.categroyTitle" icon="category.icon" categoryColor="category.color" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget" givingSubCat="givingSubCatToUpdate" searchedSubCat="subCatsToSearch.id" isSubCatSearched="makeSearchAgain"></CategoryComponent>
                    }

                }
            }
        }
        else
        {
            if (finalsearchSubCats.Any(sb => string.IsNullOrEmpty(searchQuery)))
            {
                <p> אופס, לא נמצא תוצאה שמתאימה לחיפוש </p>
            }

        }


        @if (doRefresh)
        {
            refreshBudgetsOfSubCats(true);
        }
    }

    <div id="bottomNav">
        <button>מבט לעבר</button>
        <button>מבט להווה</button>
        <button>מבט לעתיד</button>
    </div>
}

@if (currentUser == null && isOnInitializedOver)
{
    <div>
        <div>
            <p>
                אז אנחנו Count On It,
                אבל כל החבר׳ה קוראים לנו COI.

                אנחנו אפליקציה לניהול תקציב מבית איה תמרי - יועצת
                פיננסית לכלכלת המשפחה.
                אנחנו כאן ללוות אותך בדרך לניהול תקציב נכון.
                ועכשיו קצת עלייך :)
            </p>
        </div>
        <input type="text" @bind=newUser.firstName placeholder=" שם פרטי:" />
        <input type="text" @bind=newUser.lastName placeholder=" שם משפחה:" />
        <p>
            תמונת פרופיל: (לא חובה)
            נ.ב. אם כן, כדאי אחת מייצגת או אמוג’י
        </p>
        <input type="text" @bind=newUser.profilePicOrIcon placeholder="תמונה או אייקון" />

        <p>באיזה יום התזרים החודשי שלך מתחיל?</p>
        @if (newUser.monthStartDate == null)
        {
            newUser.monthStartDate = 1;
        }
        <select @bind="newUser.monthStartDate">
            <option value="1">ה-1 לחודש</option>
            <option value="2">ה-2 לחודש</option>
            <option value="10">ה-10 לחודש</option>
            <option value="15">ה-15 לחודש</option>

        </select>
    </div>

    <button @onclick="@(async () => await createNewUser())">שמירה</button>

}


@code {

    [Parameter]
    public int userID { get; set; }

    userToShow currentUser;
    UserToAdd newUser = new UserToAdd();
    CategoryToShow defaultCategory = new CategoryToShow();
    List<CategoryToShow> searchCats = new List<CategoryToShow>();
    List<SubCategoryToAdd> searchSubCats = new List<SubCategoryToAdd>();
    List<SubCategoryToAdd> finalsearchSubCats = new List<SubCategoryToAdd>();


    private string currentMonth;
    private string userGoogleId;
    private bool isChecked = false;
    string msg = "";
    string searchQuery = "";

    int newCurrentUserId;
    int categoryIdToSend;
    private int refreshKey;

    bool doRefresh = false;
    bool isOnInitializedOver = false;
    bool accordionRefresh = true;
    //bool makeSearchAgain = false;
    //bool isThereCategories => currentUser.categoriesFullList == null || currentUser.categoriesFullList.Count == 0;
    CategoryToShow catToDelete = new CategoryToShow();

    CategoryToAdd newCategory = new CategoryToAdd();
    bool openAddCatOverlay = false;

    OverDraftBudgetToEdit givingSubCatToUpdate = new OverDraftBudgetToEdit();
    public int givingsubCatCategoryID = 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1); // This is just to simulate an async process.

        int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        currentMonth = GetHebrewMonthName(currentMonthNumber);
        StateHasChanged();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userGoogleId = user.FindFirst("sub")?.Value;
            isOnInitializedOver = true;

            var userRes = await Http.GetAsync("api/Present/userToShow/" + userGoogleId);

            if (userRes.IsSuccessStatusCode)
            {
                currentUser = userRes.Content.ReadFromJsonAsync<userToShow>().Result;
                userID = currentUser.id;
                searchCats = currentUser.categoriesFullList;


                var subCatToSearch = await Http.GetAsync("api/Present/getSubCategoryTitle/" + userID);

                if (subCatToSearch.IsSuccessStatusCode)
                {
                    List<SubCategoryToAdd> subCatId = subCatToSearch.Content.ReadFromJsonAsync<List<SubCategoryToAdd>>().Result;
                    searchSubCats = subCatId;

                }

            }
            else
            {
                string error = userRes.Content.ReadAsStringAsync().Result;
                switch (error)
                {
                    case "User Not Found":
                        msg = "User not found ";
                        break;
                }

            }
        }
        else
        {
            msg = "user not authenticated";
        }
    }


    private string GetHebrewMonthName(int monthNumber)
    {
        switch (monthNumber)
        {
            case 1:
                return "ינואר";
            case 2:
                return "פברואר";
            case 3:
                return "מרץ";
            case 4:
                return "אפריל";
            case 5:
                return "מאי";
            case 6:
                return "יוני";
            case 7:
                return "יולי";
            case 8:
                return "אוגוסט";
            case 9:
                return "ספטמבר";
            case 10:
                return "אוקטובר";
            case 11:
                return "נובמבר";
            case 12:
                return "דצמבר";
            default:
                return "חודש לא תקין"; // Handle invalid month numbers
        }
    }


    public void refreshBudgetsOfSubCats(bool refreshBudget)
    {
        if (refreshBudget)
        {
            doRefresh = refreshBudget;
            Nav.NavigateTo("./", true);
        }
    }




    public async Task createNewUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userGoogleId = user.FindFirst("sub")?.Value;

            var newUserRes = await Http.PostAsJsonAsync("api/Present/AddUser/" + userGoogleId, newUser);

            if (newUserRes.IsSuccessStatusCode)
            {

                userID = newUserRes.Content.ReadFromJsonAsync<int>().Result;
                UserToAdd newUser = new UserToAdd();
                isOnInitializedOver = false;

                List<CategoryToAdd> defualtCategoriesList = new List<CategoryToAdd>()
                {
                    new CategoryToAdd{userID = userID, categroyTitle = "משק בית", icon = "🏠", color = "blue" },
                    new CategoryToAdd{userID = userID, categroyTitle = "רכב ותחבורה", icon = "🚗", color = "blue" },
                    new CategoryToAdd{userID = userID, categroyTitle = "בריאות וטיפוח", icon = "💄", color = "blue" }
                };

                foreach (CategoryToAdd defualtCategory in defualtCategoriesList)
                {
                    var defaultCategories = await Http.PostAsJsonAsync("api/Present/AddCategory/" + defualtCategory.userID, defualtCategory);

                    if (defaultCategories.IsSuccessStatusCode)
                    {

                        defaultCategory = defaultCategories.Content.ReadFromJsonAsync<CategoryToShow>().Result;

                        switch (defaultCategory.categroyTitle)
                        {
                            case "משק בית":

                                List<SubCategoryToAdd> defaultSubCategory1List = new List<SubCategoryToAdd>()
                                {
                                    new SubCategoryToAdd{subCategoryTitle = "חשבונות", categoryID = defaultCategory.id},
                                    new SubCategoryToAdd{subCategoryTitle = "מזון", categoryID = defaultCategory.id}
                                };

                                foreach (SubCategoryToAdd defaultSubCategory1 in defaultSubCategory1List)
                                {
                                    var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory1);

                                    if (defaultCategories.IsSuccessStatusCode)
                                    {
                                        msg = "ווהוו לא מעניין את מלכית";
                                    }
                                    else
                                    {
                                        msg = "לא ווהו, כן מעניין את מלכית";
                                    }
                                }
                                // Code for when number is 1
                                break;
                            case "רכב ותחבורה":

                                List<SubCategoryToAdd> defaultSubCategory2List = new List<SubCategoryToAdd>()
                                {
                                    new SubCategoryToAdd{subCategoryTitle = "דלק", categoryID = defaultCategory.id},
                                    new SubCategoryToAdd{subCategoryTitle = "תחבורה ציבורית", categoryID = defaultCategory.id}
                                };

                                foreach (SubCategoryToAdd defaultSubCategory2 in defaultSubCategory2List)
                                {
                                    var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory2);

                                    if (defaultCategories.IsSuccessStatusCode)
                                    {
                                        msg = "ווהוו לא מעניין את מלכית";
                                    }
                                    else
                                    {
                                        msg = "לא ווהו, כן מעניין את מלכית";
                                    }
                                }
                                break;
                            case "בריאות וטיפוח":
                                List<SubCategoryToAdd> defaultSubCategory3List = new List<SubCategoryToAdd>()
                                {
                                    new SubCategoryToAdd{subCategoryTitle = "קופת חולים", categoryID = defaultCategory.id},
                                    new SubCategoryToAdd{subCategoryTitle = "טואלטיקה", categoryID = defaultCategory.id}
                                };

                                foreach (SubCategoryToAdd defaultSubCategory3 in defaultSubCategory3List)
                                {
                                    var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory3);

                                    if (defaultCategories.IsSuccessStatusCode)
                                    {
                                        msg = "ווהוו לא מעניין את מלכית";
                                    }
                                    else
                                    {
                                        msg = "לא ווהו, כן מעניין את מלכית";
                                    }
                                }
                                break;

                            default:
                                msg = "Error creating new sub category";
                                break;
                        }

                        Navigation.NavigateTo("/PastHomePage");
                    }

                    else
                    {
                        msg = "Error creating new category";
                    }
                }

            }

            else
            {
                msg = "Error adding new user";
            }
        }
    }

    public void removeCat(CategoryToShow catallToDelete)
    {
        catToDelete = catallToDelete;
        currentUser.categoriesFullList.Remove(catallToDelete);
        Console.WriteLine(catToDelete);
    }

    public async Task changeGivingSubCatBudget(OverDraftBudgetToEdit givingSubCat)
    {
        var getCatID = await Http.GetAsync("api/Present/getGivingCatID/" + givingSubCat.id);
        if (getCatID.IsSuccessStatusCode)
        {
            givingsubCatCategoryID = await getCatID.Content.ReadFromJsonAsync<int>();
            givingSubCatToUpdate.id = givingSubCat.id;
            givingSubCatToUpdate.monthlyPlannedBudget = givingSubCat.monthlyPlannedBudget;
        }
    }

    public void openCategoryOverlay()
    {
        openAddCatOverlay = !openAddCatOverlay;
    }

    public void AddNewCat(CategoryToShow newCategory)
    {
        if (newCategory != null)
        {
            currentUser.categoriesFullList.Add(newCategory);
        }
    }

    void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        if (string.IsNullOrEmpty(searchQuery))
        {
            finalsearchSubCats = new List<SubCategoryToAdd>();
        }
        //FilterCatsOrSubCats();

    }

    void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")  // Trigger when Enter key is released
        {
            FilterCatsOrSubCats();
        }
    }

    void FilterCatsOrSubCats()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            searchCats = currentUser.categoriesFullList.Where(category => category.categroyTitle.Contains(searchQuery)).ToList();
            finalsearchSubCats = searchSubCats.Where(subCategory => subCategory.subCategoryTitle.Contains(searchQuery)).ToList();

        }
        else
        {
            searchCats = null; // Show all categories if the search query is empty

        }
    }

    void makeSearchAgain(bool filter)
    {
        filter = false;
        FilterCatsOrSubCats();
    }
 

    
}


