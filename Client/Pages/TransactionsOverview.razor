@page "/TransactionsOverview/{subCatID:int}/{categoryID:int}/{budget:double}/{userID:int}"
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using CountOnIt.Client.Components
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager Nav
@inject DateService DateService

<div class="outerPage">

    <div class="outerTop">
        <div class="outerBackAndProfile">

            <button class="backArrow" @onclick="goToHomePage"><img src="../css/images/back-repeated.svg" /></button>
            <span>@categoryTitle > @subCategoryTitle</span>
        </div>
        <button class="profilePic"></button>
    </div>


</div>

<div class="outerContent">

    <div class="content">

        <div class="outerTitleAndOptions">


            <div class="outerPageTitle">

                <div class="outerTitleBudgetAndDots">

                    <h3 class="pageTitle">מבט על: "@subCategoryTitle"</h3>
                    @if (!typeByCat)
                    {
                        <span class="budget">תקציב: @budget ₪</span>
                    }
                    <div class="outerDotsAndDes">

                        <button class="optionsMenu" @onclick="OpetionsBtnClicked"><img src="../css/images/option menu.svg" /></button>

                    </div>
                </div>

                @if (editSubCatBtnClicked)
                {
                    <div>
                        <div>
                            <h2>עריכת תת קטגוריה</h2>
                            <button class="modal-close-btn" @onclick="() => editSubCatBtnClicked = !editSubCatBtnClicked">&times;</button>
                        </div>


                        @if (userCategories.Count > 0)
                        {
                            <span>עריכת תת קטגוריה ל</span>
                            @if (subCatToEdit.categroyTitle == null)
                            {
                                subCatToEdit.categroyTitle = categoryTitle;
                            }
                            <select @bind="subCatToEdit.categroyTitle">

                                @foreach (AllUserCategories userCategory in userCategories)
                                {

                                    <option value=@userCategory.categroyTitle> @userCategory.categroyTitle</option>


                                }
                            </select>
                            <span>@subCatToEdit.categroyTitle</span>

                        }

                        <div>
                            <label for="amount">שם תת קטגוריה</label>
                            <input type="text" id="amount" placeholder="שם תת הקטגוריה" @bind="subCatToEdit.subCategoryTitle" />
                        </div>

                        <div>
                            <label for="description">מה התקציב החודשי שלך עבור @subCatToEdit.subCategoryTitle? </label>
                            <input type="number" id="description" placeholder="0" @bind="subCatToEdit.monthlyPlannedBudget" />
                        </div>
                        <div>
                            <label for="importance">עדיפות תת הקטגוריה</label>
                            <span>@subCatToEdit.importance</span>
                            @if (subCatToEdit.importance == 0)
                            {
                                <input type="radio"
                               name="importance" @onchange="@(() => subCatToEdit.importance = 0)" checked />
                                <label>רצון</label>
                            }
                            else
                            {
                                <input type="radio"
                               name="importance" @onchange="@(() => subCatToEdit.importance = 0)" />
                                <label>רצון</label>
                            }
                            @if (subCatToEdit.importance == 1)
                            {
                                <input type="radio"
                               name="importance" @onchange="@(() => subCatToEdit.importance = 1)" checked />
                                <label>צורך</label>
                            }
                            else
                            {
                                <input type="radio"
                               name="importance" @onchange="@(() => subCatToEdit.importance = 1)" />
                                <label>צורך</label>
                            }
                            @if (subCatToEdit.importance == 2)
                            {
                                <input type="radio"
                               name="importance" @onchange="@(() => subCatToEdit.importance = 2)" checked />
                                <label>חובה</label>
                            }
                            else
                            {
                                <input type="radio"
                               name="importance" @onchange="@(() => subCatToEdit.importance = 2)" />
                                <label>חובה</label>
                            }
                        </div>
                        <div>
                            <p>לדוגמה: לק - רוצה, דלק - צריך, חייב - שכ״ד. העדיפות משפיעה על הטיפים שתקבל לייעול התקציב שלך.</p>
                        </div>
                        <br />
                        @* <button class="submit-btn" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הזנה</button>*@
                        <button class="submit-btn" @onclick="saveUpdatedSubCat">שמירה וסיום</button>
                    </div>
                }

            </div>

            <div class="options">
                @if (isOpetionsBtnClicked)
                {


                    <OptionsMenuComponent editBtnClicked="getUserCategories" deleteBtnClicked="deleteSubCatPopUp"></OptionsMenuComponent>

                }
            </div>
        </div>

        @if (deleteBtnClicked)
        {
            <GeneralPopUpComponent popupTypeTitle="מחיקת תת קטגוריה" middleText="@popupBodyText" action="מחיקה" makeAction="deleteSubCat" closePopUp="deleteSubCatPopUp"></GeneralPopUpComponent>
        }
        <div class="outerLowerPart">

            <div class="searchWrapper">
                <div class="search__container">
                    <img src="../css/images/search btn.svg" />
                    <input class="searchInput" type="text" value="@searchQuery" @oninput="UpdateSearchQuery" @onkeyup="HandleKeyUp" placeholder="חפשו תגית או הוצאה..." />

                </div>
            </div>


            <div class="outerSortAndFilter">

                <div class="sortAndFilterBtns">
                    <div class="outerFilterBtnAndOptions">


                        <button class="filterAndSortBtns" @onclick="filterBtnClickedFunc"><img src="../css/images/filter btn.svg" /></button>
                        <span>@filterStatus</span>
                        @if (filterBtnClicked)
                        {
                            @*sortBtnClicked = false;*@
                            <div class="outerFilterOptions">

                                <div class="filterOptions">
                                    <button class="dropDownOptionBtn" @onclick="filterByTransTypeOverlayControl">אמצעי תשלום</button>
                                    <div class="divider"></div>
                                    <button class="dropDownOptionBtn" @onclick="filterByTagsOverlayControl">תגית</button>
                                    <div class="divider"></div>
                                    <button class="dropDownOptionBtn" @onclick="filterByRepeatedTrans">הוצאה חוזרת</button>
                                    <div class="divider"></div>
                                    <button class="dropDownOptionBtn" @onclick="filterBySplitPayment">תשלומים</button>
                                </div>
                            </div>

                        }
                        @if (filterByTransTypeOverlay)
                        {
                            <div class="outerPaymentMethod">
                                <div class="PaymentMethods">                               
                                    <div class="outerLay">

                                        <div class="BgOverlay">

                                            <div class="outerPaymentOverlay">

                                                <div class="outerPaymentMethodsOptions">
                                                     <button class="modal-close-btn" @onclick="() => filterByTransTypeOverlay = false"><img src="../css/images/close x.svg" /></button> 

                                                    <fieldset id="transValueType" name="transType">
                                                        <legend class="patmentsTitle">אמצעי תשלום</legend>
                                                        <div class="paymentOptions">

                                                        
                                                            <input type="radio" id="מזומן" name="transType" @onchange="@(()=> filterByType= "מזומן")" />
                                                            <label for="מזומן">מזומן</label>
                                                        <div class="divider"></div>
                                                        <input type="radio" id="אשראי" name="transType" @onchange="@(()=> filterByType= "אשראי")" />
                                                            <label for="אשראי">אשראי</label>
                                                        <div class="divider"></div>
                                                        <input type="radio" id="ביט/פייבוקס" name="transType" @onchange="@(()=> filterByType= "ביט/פייבוקס")" /> 
                                                        <label for="ביט/פייבוקס">ביט/פייבוקס</label>
                                                        <div class="divider"></div>
                                                        <input type="radio" id="אחר" name="transType" @onchange="@(()=> filterByType= "אחר")" /> 
                                                        <label for="אחר">אחר</label>
                                                            </div>
                                                    </fieldset>
                                                    <button @onclick="@(()=>filterByTransType(filterByType))">סינון הוצאות</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>


                        }
                        @if (filterByTagOverlay)
                        {

                            if (subCatTagsList.Count > 0)
                            {
                                <button @onclick="() => filterByTagOverlay = false">close</button>
                                <div>

                                    <label for="subCatTags">התגיות שלי</label><br />
                                    @foreach (TagsToShow tag in subCatTagsList)
                                    {
                                        <input type="radio" name="subCatTags" @onchange="@(()=> filterByTag= tag.id)" />
                                        <label>@tag.tagTitle</label>
                                    }
                                    <br />
                                    <button @onclick="(()=>filterByTags(filterByTag))">סינון הוצאות</button>
                                </div>
                            }
                        }
                    </div>


                    <div class="outerFilterBtnAndOptions">
                        <button class="filterAndSortBtns" @onclick="sortBtnClickedFunc"><img src="../css/images/sort btn.svg" /></button>
                        @if (sortBtnClicked)
                        {
                            <div class="outerSortOptions">
                                <div class="filterOptions">

                                    <fieldset id="sortTrans" name="transSorting">
                                        <input class="sortBtn" type="radio" value="תאריך (מהחדש לישן)" name="transSorting" @onchange="@(()=> SortingOptions("dateDes"))" />תאריך (מהחדש לישן)
                                        <div class="sortDivider"></div>
                                        <input class="sortBtn" type="radio" value="תאריך (מהישן לחדש)" name="transSorting" @onchange="@(()=> SortingOptions("dateAsc"))" />תאריך (מהישן לחדש)
                                        <div class="sortDivider"></div>
                                        <input class="sortBtn" type="radio" value="סכום הוצאה (מהגבוה לנמוך)" name="transSorting" @onchange="@(()=> SortingOptions("sumDes"))" /> סכום הוצאה (מהגבוה לנמוך)
                                        <div class="sortDivider"></div>
                                        <input class="sortBtn" type="radio" value="סכום הוצאה (מהנמוך לגבוה)" name="transSorting" @onchange="@(()=> SortingOptions("sumAsc"))" /> סכום הוצאה (מהנמוך לגבוה)
                                    </fieldset>
                                </div>
                            </div>
                        }
                        <span>@sortStatus</span>
                    </div>
                    <button class="filterAndSortBtns" @onclick="undoFilterAndSort">איפוס</button>


                </div>
            </div>

            <div id="transactions">
                @if (allTransactions != null && allTransactions.Count > 0)
                {
                    foreach (TransactionOverviewToShow transaction in allTransactions)
                    {
                        if (!filterByReturnTrans)
                        {

                            <TransOverviewComponent transaction="transaction" removeTransaction="transactionDeleted" subCatID="@subCatID" userID="@userID" subCatTakenBudget="updateSubCatBudgetPostOverdraft" overdraftStatus="@overdraftStatus" typeByCat="@typeByCat"></TransOverviewComponent>

                        }
                        else
                        {
                            filterStatus = "הוצאה חוזרת";
                            if (transaction.fixedMonthly == true)
                            {
                                <TransOverviewComponent transaction="transaction" removeTransaction="transactionDeleted" subCatID="@subCatID" userID="@userID" subCatTakenBudget="updateSubCatBudgetPostOverdraft" overdraftStatus="@overdraftStatus" typeByCat="@typeByCat"></TransOverviewComponent>
                                <hr />
                            }

                        }
                        if (transaction.transType == 3)
                        {
                            <span>⚠️ הזנה חורגת</span>
                        }
                        else
                        {
                            overdraftStatus = false;
                        }


                        @if (totalSpendings < budget && budget != null)
                        {
                            overdraftStatus = false;
                        }

                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public int subCatID { get; set; }

    [Parameter]
    public int categoryID { get; set; }

    [Parameter]
    public double? budget { get; set; }

    [Parameter]
    public EventCallback<SubCategoryToEdit> updateEditedSubCat { get; set; }

    public string categoryTitle = "";


    public string subCategoryTitle = "";
    List<TransactionOverviewToShow> allTransactions = new List<TransactionOverviewToShow>();
    List<TransactionOverviewToShow> prefilteredTransactions = new List<TransactionOverviewToShow>();

    bool deleteBtnClicked = false;

    bool editSubCatBtnClicked = false;
    SubCategoryToEdit subCatToEdit = new SubCategoryToEdit();
    List<AllUserCategories> userCategories = new List<AllUserCategories>();
    SubCategoryToUpdate subCategoryToUpdate = new SubCategoryToUpdate();
    public string popupBodyText = "";
    public bool overdraftStatus = false;

    public double totalSpendings = 0;

    bool filterBtnClicked = false;
    bool filterByTransTypeOverlay = false;
    bool toSearch = false;
    string filterByType = "";
    int filterByTag = 0;
    bool filterByTagOverlay = false;
    bool filterByReturnTrans = false;
    bool sortBtnClicked = false;
    bool isOpetionsBtnClicked = false;
    List<TagsToShow> subCatTagsList = new List<TagsToShow>();
    string filterStatus = "";
    string sortStatus = "";
    string searchQuery = "";

    bool typeByCat = false; //false- expense, true- income

    protected override async Task OnInitializedAsync()
    {
        //get category title:

        var catTitle = await Http.GetAsync("api/Present/getCategoryTitle/" + categoryID);
        if (catTitle.IsSuccessStatusCode)
        {
            var catTitleRes = await catTitle.Content.ReadAsStringAsync();
            categoryTitle = catTitleRes;


            Console.WriteLine("catTitle had a successful request ");
            //get subcategory title:
            var subCatTitle = await Http.GetAsync("api/Present/GetSubCategory/" + subCatID);
            if (subCatTitle.IsSuccessStatusCode)
            {
                SubCategoryToShow subTitle = await subCatTitle.Content.ReadFromJsonAsync<SubCategoryToShow>();
                subCategoryTitle = subTitle.subCategoryTitle;
                if (categoryTitle == "הכנסות")
                {
                    var checkCatType = await Http.GetAsync("api/Transactions/getCatType/" + userID);
                    if (checkCatType.IsSuccessStatusCode)
                    {
                        List<int> incomeSubCats = new List<int>();
                        incomeSubCats = checkCatType.Content.ReadFromJsonAsync<List<int>>().Result;
                        if (incomeSubCats.Count > 0)
                        {
                            if (incomeSubCats.Contains(subCatID))
                            {
                                typeByCat = true;

                                var getAllIncomeTransactions = await Http.GetAsync("api/Transactions/getAllIncomeTransactions/" + subCatID);
                                if (getAllIncomeTransactions.IsSuccessStatusCode)
                                {
                                    var checkTransList = getAllIncomeTransactions.Content.ReadFromJsonAsync<List<TransactionOverviewToShow>>().Result;
                                    if (checkTransList != null && checkTransList.Count > 0)
                                    {
                                        allTransactions = checkTransList;
                                        foreach (TransactionOverviewToShow trans in allTransactions)
                                        {
                                            totalSpendings += trans.transValue;
                                        }
                                        prefilteredTransactions = checkTransList;
                                        await getSubCatTags();
                                    }
                                    else
                                    {
                                        Console.WriteLine("No transactions found related to this sub category");
                                    }
                                }
                                else
                                {
                                    var transErrorContent = await getAllIncomeTransactions.Content.ReadAsStringAsync();
                                    Console.WriteLine("Failed to find transactions. Error: " + transErrorContent);
                                }
                            }

                        }
                    }
                }
                else
                {
                    var getAllTransactions = await Http.GetAsync("api/Transactions/getAllTransactions/" + subCatID);
                    if (getAllTransactions.IsSuccessStatusCode)
                    {
                        var checkTransList = getAllTransactions.Content.ReadFromJsonAsync<List<TransactionOverviewToShow>>().Result;
                        if (checkTransList != null && checkTransList.Count > 0)
                        {
                            allTransactions = checkTransList;
                            foreach (TransactionOverviewToShow trans in allTransactions)
                            {
                                totalSpendings += trans.transValue;
                            }
                            prefilteredTransactions = checkTransList;
                            await getSubCatTags();
                        }
                        else
                        {
                            Console.WriteLine("No transactions found related to this sub category");
                        }
                    }
                    else
                    {
                        var transErrorContent = await getAllTransactions.Content.ReadAsStringAsync();
                        Console.WriteLine("Failed to find transactions. Error: " + transErrorContent);
                    }
                }
            }
            else
            {
                var errorContent = await catTitle.Content.ReadAsStringAsync();
                Console.WriteLine("Failed to find category title. Error: " + errorContent);
            }


        }

    }
    public void goToHomePage()
    {
        Nav.NavigateTo("./homePage");
    }

    public void transactionDeleted(int transIdToRemove)
    {
        foreach (TransactionOverviewToShow transaction in allTransactions)
        {
            if (transaction.id == transIdToRemove)
            {
                allTransactions.Remove(transaction);
                Console.WriteLine("transaction id- " + transaction.id + " deleted");
            }
        }
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    public void updateSubCatBudgetPostOverdraft(List<OverDraftBudgetToEdit> subNewBudget)
    {
        foreach (OverDraftBudgetToEdit newBudget in subNewBudget)
        {
            if (newBudget.id == subCatID)
            {
                budget = newBudget.monthlyPlannedBudget;
            }
        }
    }

    public async Task saveUpdatedSubCat()
    {
        subCategoryToUpdate.subCategoryTitle = subCatToEdit.subCategoryTitle;
        subCategoryToUpdate.importance = subCatToEdit.importance;
        foreach (AllUserCategories category in userCategories)
        {
            if (category.categroyTitle == subCatToEdit.categroyTitle)
            {
                subCatToEdit.categoryID = category.id;
            }
        }
        subCategoryToUpdate.categoryID = subCatToEdit.categoryID;
        subCategoryToUpdate.id = subCatToEdit.id;
        subCategoryToUpdate.monthlyPlannedBudget = subCatToEdit.monthlyPlannedBudget;

        var updateCatRes = await Http.PostAsJsonAsync("api/Present/EditSubCategory/", subCategoryToUpdate);
        if (updateCatRes.IsSuccessStatusCode)
        {
            SubCategoryToUpdate updatedSubCat = await updateCatRes.Content.ReadFromJsonAsync<SubCategoryToUpdate>();
            subCatToEdit.subCategoryTitle = updatedSubCat.subCategoryTitle;
            subCatToEdit.importance = updatedSubCat.importance;
            subCatToEdit.monthlyPlannedBudget = updatedSubCat.monthlyPlannedBudget;

            updateEditedSubCat.InvokeAsync(subCatToEdit);

            subCategoryTitle = updatedSubCat.subCategoryTitle;
            budget = updatedSubCat.monthlyPlannedBudget;
            foreach (AllUserCategories category in userCategories)
            {
                if (updatedSubCat.categoryID == category.id)
                {
                    categoryTitle = category.categroyTitle;
                }
            }

            editSubCatBtnClicked = false; //closeing the edit overlay

            Console.WriteLine("sub category updated");

        }
        else
        {
            Console.WriteLine("failed to update category");
        }
    }

    public async Task getUserCategories()
    {
        //editSubCatBtnClicked = true;
        subCatToEdit.categroyTitle = categoryTitle;
        subCatToEdit.monthlyPlannedBudget = budget;
        subCatToEdit.subCategoryTitle = subCategoryTitle;
        subCatToEdit.id = subCatID;
        subCatToEdit.categoryID = categoryID;
        var getSubCatImportance = await Http.GetAsync("api/Present/GetSubCatImportance/" + subCatToEdit.id);
        if (getSubCatImportance.IsSuccessStatusCode)
        {
            subCatToEdit.importance = await getSubCatImportance.Content.ReadFromJsonAsync<int>();
        }
        else
        {
            Console.WriteLine("couldn't find this sub cat's importance");
        }


        var getAllUserCategories = await Http.GetAsync("api/Present/GetUserCategories/" + userID);
        if (getAllUserCategories.IsSuccessStatusCode)
        {
            userCategories = await getAllUserCategories.Content.ReadFromJsonAsync<List<AllUserCategories>>().ConfigureAwait(false);

            //arranges the category dropdown so the current category will be the one initially displayed
            List<AllUserCategories> tempUserCategories = new List<AllUserCategories>();
            foreach (AllUserCategories category in userCategories)
            {
                if (category.id == categoryID)
                {
                    tempUserCategories.Insert(0, category);
                }
                else
                {
                    tempUserCategories.Add(category);
                }

            }
            userCategories = tempUserCategories;
            editSubCatBtnClicked = !editSubCatBtnClicked;
        }
        else
        {
            Console.WriteLine("no Categories found");
        }
    }
    public void deleteSubCatPopUp()
    {
        popupBodyText = "תת הקטגוריה: '" + subCategoryTitle + "' תמחק";
        deleteBtnClicked = !deleteBtnClicked;
    }
    public async Task deleteSubCat()
    {
        var deleteRes = await Http.DeleteAsync("api/Present/deleteSubCategory/" + subCatID);
        if (deleteRes.IsSuccessStatusCode)
        {
            Console.WriteLine("sub category deleted");
            goToHomePage();

        }
        else
        {
            Console.WriteLine(" בעיה במחיקת תת- קטגוריה");
        }
    }

    public void filterByTransTypeOverlayControl()
    {
        filterByTransTypeOverlay = !filterByTransTypeOverlay;
    }

    public void filterByTagsOverlayControl()
    {
        filterByTagOverlay = !filterByTagOverlay;
    }

    public async Task filterByTransType(string selectedType)
    {
        filterStatus = "אמצעי תשלום: " + selectedType;
        for (int i = allTransactions.Count - 1; i >= 0; i--)
        {
            if (allTransactions[i].valueType != selectedType)
            {
                allTransactions.Remove(allTransactions[i]);
            }
        }
        if (allTransactions == null || allTransactions.Count <= 0)
        {
            Console.WriteLine("no transactions fit selected payment method");
        }
        filterByTransTypeOverlay = false;
        filterBtnClicked = false;
    }

    public async Task filterByTags(int tagID)
    {
        await undoFilterAndSort();

        Console.WriteLine(filterByTag + ", " + tagID);
        string tagTitle = "";
        for (int i = allTransactions.Count - 1; i >= 0; i--)
        {
            if (allTransactions[i].tagID != tagID)
            {
                allTransactions.Remove(allTransactions[i]);
            }
            else
            {
                tagTitle = allTransactions[i].tagTitle;
            }
        }
        filterStatus = "תגית: " + tagTitle;
        filterByTagOverlay = false;
        filterBtnClicked = false;

    }
    public async Task getSubCatTags()
    {
        subCatTagsList = new List<TagsToShow>();
        var getTagsRes = await Http.GetAsync("api/Transactions/getSubCatTags/" + subCatID);
        if (getTagsRes.IsSuccessStatusCode)
        {
            var subCatTags = getTagsRes.Content.ReadFromJsonAsync<List<TagsToShow>>().Result;
            subCatTagsList = subCatTags;

            //filterByTagOverlay = true;
        }
        else
        {
            Console.WriteLine("No tags found");
        }
    }

    public async Task filterBySplitPayment()
    {
        await undoFilterAndSort();

        for (int i = allTransactions.Count - 1; i >= 0; i--)
        {
            if (allTransactions[i].parentTransID != null)
            {
                var findParentRes = await Http.GetAsync("api/Transactions/identifyParent/" + allTransactions[i].parentTransID);
                if (findParentRes.IsSuccessStatusCode)
                {
                    Console.WriteLine("transaction: " + allTransactions[i].transTitle + " is a part of a split payment");
                }
            }
            else if (allTransactions[i].splitPayment == true)
            {
                Console.WriteLine("transaction: " + allTransactions[i].transTitle + " is a parent of a split payment");
            }
            else
            {
                allTransactions.Remove(allTransactions[i]);
            }
        }
        filterStatus = "תשלומים";
        filterBtnClicked = false;
    }

    public void SortingOptions(string sortDirection)
    {
        switch (sortDirection)
        {
            case "dateDes":
                allTransactions = allTransactions.OrderByDescending(e => e.transDate).ToList();
                sortStatus = "תאריך (מהחדש לישן)";
                break;
            case "dateAsc":
                allTransactions = allTransactions.OrderBy(e => e.transDate).ToList();
                sortStatus = "תאריך (מהישן לחדש)";
                break;
            case "sumDes":
                allTransactions = allTransactions.OrderByDescending(e => e.transValue).ToList();
                sortStatus = "סכום הוצאה (מהגבוה לנמוך)";
                break;
            case "sumAsc":
                allTransactions = allTransactions.OrderBy(e => e.transValue).ToList();
                sortStatus = "סכום הוצאה (מהנמוך לגבוה)";
                break;
        }
        sortBtnClicked = false;
    }

    public void filterByRepeatedTrans()
    {
        filterByReturnTrans = true;
        filterBtnClicked = false;
        filterStatus = "הוצאה חוזרת";
    }

    public async Task undoFilterAndSort()
    {
        allTransactions = new List<TransactionOverviewToShow>();
        var getAllTransactions = await Http.GetAsync("api/Transactions/getAllTransactions/" + subCatID);
        if (getAllTransactions.IsSuccessStatusCode)
        {
            var checkTransList = getAllTransactions.Content.ReadFromJsonAsync<List<TransactionOverviewToShow>>().Result;
            if (checkTransList != null && checkTransList.Count > 0)
            {
                allTransactions = checkTransList;
                foreach (TransactionOverviewToShow trans in allTransactions)
                {
                    totalSpendings += trans.transValue;
                }
            }
            else
            {
                Console.WriteLine("No transactions found related to this sub category");
            }
        }
        else
        {
            var transErrorContent = await getAllTransactions.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to find transactions. Error: " + transErrorContent);
        }
        filterBtnClicked = false;
        filterStatus = "";
        sortStatus = "";
        if (filterByReturnTrans)
        {
            filterByReturnTrans = false;
        }
    }

    void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();

        //FilterCatsOrSubCats();

    }

    void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")  // Trigger when Enter key is released
        {
            toSearch = true;

            if (string.IsNullOrEmpty(searchQuery))
            {

            }
            FilterCatsOrSubCats();
        }

    }

    void FilterCatsOrSubCats()
    {
        //if (!string.IsNullOrEmpty(searchQuery))
        //{
        //    searchCats = currentUser.categoriesFullList.Where(category => category.categroyTitle.Contains(searchQuery)).ToList();


        //}
        //else
        //{
        //    searchCats = null; // Show all categories if the search query is empty

        //}
    }

    void filterBtnClickedFunc()
    {
        filterBtnClicked = !filterBtnClicked;
        sortBtnClicked = false;

    }

    void sortBtnClickedFunc()
    {
        sortBtnClicked = !sortBtnClicked;
        filterBtnClicked = false;

    }

}
