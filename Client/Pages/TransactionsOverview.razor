@page "/TransactionsOverview/{subCatID:int}/{categoryID:int}/{budget:double}/{userID:int}"
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using CountOnIt.Client.Components
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager Nav
@inject DateService DateService


<button @onclick="goToHomePage">🔙</button>
<button>Profile avatar</button>
<span>@categoryTitle > @subCategoryTitle</span>
<h3>מבט על: "@subCategoryTitle"</h3>
<span>תקציב: @budget</span>
<OptionsMenuComponent editBtnClicked="getUserCategories" deleteBtnClicked="deleteSubCatPopUp"></OptionsMenuComponent>
@if (deleteBtnClicked)
{
    <GeneralPopUpComponent popupTypeTitle="מחיקת תת קטגוריה" middleText="@popupBodyText" action="מחיקה🗑️" makeAction="deleteSubCat" closePopUp="deleteSubCatPopUp"></GeneralPopUpComponent>
}
@if (editSubCatBtnClicked)
{
    <div>
        <div>
            <h2>עריכת תת קטגוריה</h2>
            <button class="modal-close-btn" @onclick="() => editSubCatBtnClicked = !editSubCatBtnClicked">&times;</button>
        </div>


        @if (userCategories.Count > 0)
        {
            <span>עריכת תת קטגוריה ל</span>
            @if (subCatToEdit.categroyTitle == null)
            {
                subCatToEdit.categroyTitle = categoryTitle;
            }
            <select @bind="subCatToEdit.categroyTitle">

                @foreach (AllUserCategories userCategory in userCategories)
                {

                    <option value=@userCategory.categroyTitle> @userCategory.categroyTitle</option>


                }
            </select>
            <span>@subCatToEdit.categroyTitle</span>

        }

        <div>
            <label for="amount">שם תת קטגוריה</label>
            <input type="text" id="amount" placeholder="שם תת הקטגוריה" @bind="subCatToEdit.subCategoryTitle" />
        </div>

        <div>
            <label for="description">מה התקציב החודשי שלך עבור @subCatToEdit.subCategoryTitle? </label>
            <input type="number" id="description" placeholder="0" @bind="subCatToEdit.monthlyPlannedBudget" />
        </div>
        <div>
            <label for="importance">עדיפות תת הקטגוריה</label>
            <span>@subCatToEdit.importance</span>
            @if (subCatToEdit.importance == 0)
            {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 0)" checked />
                <label>רצון</label>
            }
            else
            {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 0)" />
                <label>רצון</label>
            }
            @if (subCatToEdit.importance == 1)
            {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 1)" checked />
                <label>צורך</label>
            }
            else
            {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 1)" />
                <label>צורך</label>
            }
            @if (subCatToEdit.importance == 2)
            {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 2)" checked />
                <label>חובה</label>
            }
            else
            {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 2)" />
                <label>חובה</label>
            }
        </div>
        <div>
            <p>לדוגמה: לק - רוצה, דלק - צריך, חייב - שכ״ד. העדיפות משפיעה על הטיפים שתקבל לייעול התקציב שלך.</p>
        </div>
        <br />
        @* <button class="submit-btn" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הזנה</button>*@
        <button class="submit-btn" @onclick="saveUpdatedSubCat">שמירה וסיום</button>
    </div>
}
<div id="searchBar"></div>
<div id="sortAndFilterBtns"></div>
<div id="transactions">
    @if (allTransactions != null && allTransactions.Count > 0)
    {
        @foreach (TransactionOverviewToShow transaction in allTransactions)
        {
            
            <TransOverviewComponent transaction="transaction" removeTransaction="transactionDeleted" subCatID="@subCatID" userID="@userID" subCatTakenBudget="updateSubCatBudgetPostOverdraft" overdraftStatus="@overdraftStatus"></TransOverviewComponent>

            if (transaction.transType == 3)
            {
                <span>⚠️ הזנה חורגת</span>
            }
            <hr />
        }
        @if (totalSpendings<budget && budget!=null)
        {
            overdraftStatus = false;
        }
    }
</div>

@code {
    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public int subCatID { get; set; }

    [Parameter]
    public int categoryID { get; set; }

    [Parameter]
    public double? budget { get; set; }

    [Parameter]
    public EventCallback<SubCategoryToEdit> updateEditedSubCat { get; set; }

    public string categoryTitle = "";


    public string subCategoryTitle = "";
    List<TransactionOverviewToShow> allTransactions = new List<TransactionOverviewToShow>();

    bool deleteBtnClicked = false;

    bool editSubCatBtnClicked = false;
    SubCategoryToEdit subCatToEdit = new SubCategoryToEdit();
    List<AllUserCategories> userCategories = new List<AllUserCategories>();
    SubCategoryToUpdate subCategoryToUpdate = new SubCategoryToUpdate();
    public string popupBodyText = "";
    public bool overdraftStatus = false;

    public double totalSpendings = 0;

    protected override async Task OnInitializedAsync()
    {
        //get category title:

        var catTitle = await Http.GetAsync("api/Present/getCategoryTitle/" + categoryID);
        if (catTitle.IsSuccessStatusCode)
        {
            var catTitleRes = await catTitle.Content.ReadAsStringAsync();
            categoryTitle = catTitleRes;

            Console.WriteLine("catTitle had a successful request ");
        }
        else
        {
            var errorContent = await catTitle.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to find category title. Error: " + errorContent);
        }
        //get subcategory title:
        var subCatTitle = await Http.GetAsync("api/Present/getSubCategoryTitle/" + subCatID);
        if (subCatTitle.IsSuccessStatusCode)
        {
            var subTitle = await subCatTitle.Content.ReadAsStringAsync();  // Read the response as plain text
            subCategoryTitle = subTitle;
        }
        else
        {
            var subCatErrorContent = await subCatTitle.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to find subcategory title. Error: " + subCatErrorContent);
        }
        //get transactions of current month: 
        var getAllTransactions = await Http.GetAsync("api/Transactions/getAllTransactions/" + subCatID);
        if (getAllTransactions.IsSuccessStatusCode)
        {
            var checkTransList = getAllTransactions.Content.ReadFromJsonAsync<List<TransactionOverviewToShow>>().Result;
            if (checkTransList != null && checkTransList.Count > 0)
            {
                allTransactions = checkTransList;

                foreach (TransactionOverviewToShow trans in allTransactions)
                {
                    totalSpendings += trans.transValue;
                }


            }
            else
            {
                Console.WriteLine("No transactions found related to this sub category");
            }
        }
        else
        {
            var transErrorContent = await getAllTransactions.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to find transactions. Error: " + transErrorContent);
        }
    }
    public void goToHomePage()
    {
        Nav.NavigateTo("./homePage");
    }

    public void transactionDeleted(int transIdToRemove)
    {
        foreach (TransactionOverviewToShow transaction in allTransactions)
        {
            if (transaction.id == transIdToRemove)
            {
                allTransactions.Remove(transaction);
                Console.WriteLine("transaction id- " + transaction.id + " deleted");
            }
        }
    }

    public void updateSubCatBudgetPostOverdraft(List<OverDraftBudgetToEdit> subNewBudget)
    {
        foreach (OverDraftBudgetToEdit newBudget in subNewBudget)
        {
            if (newBudget.id == subCatID)
            {
                budget = newBudget.monthlyPlannedBudget;
            }
        }
    }

    public async Task saveUpdatedSubCat()
    {
        subCategoryToUpdate.subCategoryTitle = subCatToEdit.subCategoryTitle;
        subCategoryToUpdate.importance = subCatToEdit.importance;
        foreach (AllUserCategories category in userCategories)
        {
            if (category.categroyTitle == subCatToEdit.categroyTitle)
            {
                subCatToEdit.categoryID = category.id;
            }
        }
        subCategoryToUpdate.categoryID = subCatToEdit.categoryID;
        subCategoryToUpdate.id = subCatToEdit.id;
        subCategoryToUpdate.monthlyPlannedBudget = subCatToEdit.monthlyPlannedBudget;

        var updateCatRes = await Http.PostAsJsonAsync("api/Present/EditSubCategory/", subCategoryToUpdate);
        if (updateCatRes.IsSuccessStatusCode)
        {
            SubCategoryToUpdate updatedSubCat = await updateCatRes.Content.ReadFromJsonAsync<SubCategoryToUpdate>();
            subCatToEdit.subCategoryTitle = updatedSubCat.subCategoryTitle;
            subCatToEdit.importance = updatedSubCat.importance;
            subCatToEdit.monthlyPlannedBudget = updatedSubCat.monthlyPlannedBudget;

            updateEditedSubCat.InvokeAsync(subCatToEdit);

            subCategoryTitle = updatedSubCat.subCategoryTitle;
            budget = updatedSubCat.monthlyPlannedBudget;
            foreach (AllUserCategories category in userCategories)
            {
                if (updatedSubCat.categoryID==category.id)
                {
                    categoryTitle =category.categroyTitle;
                }
            }

            editSubCatBtnClicked = false; //closeing the edit overlay

            Console.WriteLine("sub category updated");

        }
        else
        {
            Console.WriteLine("failed to update category");
        }
    }

    public async Task getUserCategories()
    {
        //editSubCatBtnClicked = true;
        subCatToEdit.categroyTitle = categoryTitle;
        subCatToEdit.monthlyPlannedBudget = budget;
        subCatToEdit.subCategoryTitle = subCategoryTitle;
        subCatToEdit.id = subCatID;
        subCatToEdit.categoryID = categoryID;
        var getSubCatImportance = await Http.GetAsync("api/Present/GetSubCatImportance/" + subCatToEdit.id);
        if (getSubCatImportance.IsSuccessStatusCode)
        {
            subCatToEdit.importance = await getSubCatImportance.Content.ReadFromJsonAsync<int>();
        }
        else
        {
            Console.WriteLine("couldn't find this sub cat's importance");
        }


        var getAllUserCategories = await Http.GetAsync("api/Present/GetUserCategories/" + userID);
        if (getAllUserCategories.IsSuccessStatusCode)
        {
            userCategories = await getAllUserCategories.Content.ReadFromJsonAsync<List<AllUserCategories>>().ConfigureAwait(false);

            //arranges the category dropdown so the current category will be the one initially displayed
            List<AllUserCategories> tempUserCategories = new List<AllUserCategories>();
            foreach (AllUserCategories category in userCategories)
            {
                if (category.id == categoryID)
                {
                    tempUserCategories.Insert(0, category);
                }
                else
                {
                    tempUserCategories.Add(category);
                }

            }
            userCategories = tempUserCategories;
            editSubCatBtnClicked = !editSubCatBtnClicked;
        }
        else
        {
            Console.WriteLine("no Categories found");
        }
    }
    public void deleteSubCatPopUp()
    {
        popupBodyText = "תת הקטגוריה: '" + subCategoryTitle + "' תמחק";
        deleteBtnClicked = !deleteBtnClicked;
    }
    public async Task deleteSubCat()
    {
        var deleteRes = await Http.DeleteAsync("api/Present/deleteSubCategory/" + subCatID);
        if (deleteRes.IsSuccessStatusCode)
        {
            Console.WriteLine("sub category deleted");
            goToHomePage();

        }
        else
        {
            Console.WriteLine(" בעיה במחיקת תת- קטגוריה");
        }
    }
}
