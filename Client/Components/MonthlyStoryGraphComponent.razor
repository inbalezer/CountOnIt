@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toEdit
@using System;
@using System.Globalization;
@using Blazorise;
@using Blazorise.Charts
@inject HttpClient Http


<BarChart @ref="barChart" TItem="double" Options="@options" />

@code {

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public List<CategoryToShow> allUserCategories { get; set; }

    List<CategoriesOverviewToShow> allCatDetails = new List<CategoriesOverviewToShow>();

    BarChart<double> barChart;

    BarChartOptions options = new()
        {
            IndexAxis = "y",
            Elements = new()
            {
                Bar = new()
                {
                    BorderWidth = 2,
                }
            },
            Responsive = true,
            Plugins = new()
            {
                Legend = new()
                {
                    Position = "right"
                },
                Title = new()
                {
                    Display = true,
                    Text = ""
                }
            }
        };

    protected override async Task OnInitializedAsync()
    {
        var getCatDetails = await Http.GetAsync("api/Present/GetCategoriesOverview/" + userID);
        if (getCatDetails.IsSuccessStatusCode)
        {
            allCatDetails = getCatDetails.Content.ReadFromJsonAsync<List<CategoriesOverviewToShow>>().Result;
            foreach (CategoriesOverviewToShow catSum in allCatDetails)
            {
                catSum.currentCategorySum = Math.Round(catSum.currentCategorySum, 2);
                Labels.Add(catSum.categroyTitle);

                foreach (CategoryToShow cat in allUserCategories)
                {
                    if (catSum.categroyTitle==cat.categroyTitle)
                    {
                        string catColor = "";
                        if (cat.color==null)
                        {
                            catColor = convertCatColors("#6775f4"); //primary blue
                        }
                        else
                        {
                            catColor = convertCatColors(cat.color);
                        }
                        backgroundColors.Add(catColor);
                        borderColors.Add(catColor);
                    }
                }

            }

        }
    }

    public string convertCatColors(string catColor)
    {
        string convertedColor = "";
        switch (catColor)
        {
            case "#f4b367": //mustard
                convertedColor = "ChartColor.FromRgba(244,179,103,255)";
                break;
            case "#7b67f4": //dark purple
                convertedColor = "ChartColor.FromRgba(123,103,244,255)";
                break;
            case "#f467ab": //dark pink
                convertedColor = "ChartColor.FromRgba(244,103,171,255)";
                break;
            case "#f47867": //salmon pink
                convertedColor = "ChartColor.FromRgba(244,120,103,255)";
                break;
            case "#85e7a0": //light green
                convertedColor = "ChartColor.FromRgba(133,231,160,255)";
                break;
            case "#ffef9d": //banana
                convertedColor = "ChartColor.FromRgba(255,239,157,255)";
                break;
            case "#678ef4": //banana
                convertedColor = "ChartColor.FromRgba(103,142,244,255)";
                break;
            case "#67caf4": //light-blue
                convertedColor = "ChartColor.FromRgba(103,202,244,255)";
                break;
            case "#fbebd7": //cream
                convertedColor = "ChartColor.FromRgba(251,235,215,255)";
                break;
            case "#04905e": //dark green
                convertedColor = "ChartColor.FromRgba(4,144,94,255)";
                break;
            case "#f95050": //red
                convertedColor = "ChartColor.FromRgba(249,80,80,255)";
                break;
            case "#dadada": //gray
                convertedColor = "ChartColor.FromRgba(218,218,218,255)";
                break;
        };
        return convertedColor;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate(Labels,
            GetBarChartDataset(""));
    }

    BarChartDataset<double> GetBarChartDataset(string label)
    {
        return new BarChartDataset<double>
            {
                Label = label,
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
            };
    }

    List<string> Labels = new List<string>();
    //string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string>();
    List<string> borderColors = new List<string>();
    Random random = new Random(DateTime.Now.Millisecond);

    List<double> RandomizeData()
    {
        return new List<double> {
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble() 
        };

    }

  
}
