@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager nav


@if (deleteBtnClicked)
{
    <GeneralPopUpComponent popupTypeTitle="מחיקת תת קטגוריה" middleText="@popupBodyText" action="מחיקה" makeAction="deleteSubCat" closePopUp="deleteSubCatPopUp"></GeneralPopUpComponent>
}

<div class="budget-card">

    <div class="budget-header">
        <div class="textAndLine">
            <h3 class="subCatTitle">@subCategoryTitle</h3>
            <div class="subCatLine">
            </div>
        </div>

        <div class="closedAndOpenMenu">
            <button class="options-button" @onclick="(() => isOptBtnClicked = !isOptBtnClicked)"><img src="../css/images/option menu.svg" /></button>
            @if (isOptBtnClicked)
            {
                <OptionsMenuComponent editBtnClicked="getUserCategories" deleteBtnClicked="deleteSubCatPopUp"></OptionsMenuComponent>
            }
        </div>

    </div>

    <div class="budget-info">
        @if (!categoryTypeIndicator)
        {

            <button class="budget-progress" @onclick="goToTransactionsPage">
                @budget /  @Math.Round(totalSpendings,2) ₪
            </button>
            @if (totalSpendings > budget)
            {
                <span>⚠️</span>
            }
            <button class="add-transaction-button" @onclick="openAddTransOverlay"><img src="../css/images/+2.svg" /></button>
        }
        else
        {
            <button class="budget-progress" @onclick="goToTransactionsPage">
                @Math.Round(totalSpendings,2) ₪
            </button>

            <button class="add-transaction-button" @onclick="openAddTransOverlay"><img src="../css/images/+2.svg" /></button>
        }
    </div>
</div>




@if (openTransOverlay)
{
    <AddTransactionComponent subCategoryTitle="@subCategoryTitle" subCategoryIDTOGet="@subCategoryIDToGet" isTransactionOverlayOpen="@openAddTransOverlay" userID="@userID" gapsToUpdateBudgets="gapsToUpdateTheBudget" addTransactionToTotal="addNewTransToTotalSpendings" categoryTypeIndicator="@categoryTypeIndicator"></AddTransactionComponent>

}


@if (editSubCatBtnClicked)
{
    <div class="outerSubCatOverlay">

        <div class="innerSubCatOverlay">
            <button class="modal-close-btn" @onclick="() => editSubCatBtnClicked = !editSubCatBtnClicked"><img src="../css/images/close x.svg" /></button>
            <h2 class="subCatTitle">עריכת תת קטגוריה</h2>



            <div class="editAndAddSubCat">
                @if (userCategories.Count > 0)
                {

                    <span>העברת תת קטגוריה ל</span>
                    @if (subCatToEdit.categroyTitle == null)
                    {
                        subCatToEdit.categroyTitle = categoryTitle;
                    }
                    <select class="catsDropDown" @bind="subCatToEdit.categroyTitle">

                        @foreach (AllUserCategories userCategory in userCategories)
                        {
                            
                            <option class="catsOptions" value=@userCategory.categroyTitle> @userCategory.categroyTitle</option>

                    

                        }
                </select>


                }
        </div>

        <div>
            <label for="amount">שם תת קטגוריה</label>
            <input type="text" id="amount" placeholder="שם תת הקטגוריה" @bind="subCatToEdit.subCategoryTitle" />
        </div>

        <div>
            <label for="description">מה התקציב החודשי שלך עבור @subCatToEdit.subCategoryTitle? </label>
            <input type="number" id="description" placeholder="0" @bind="subCatToEdit.monthlyPlannedBudget" />
        </div>
        <div>
            <label for="importance">עדיפות תת הקטגוריה</label>
            <span>@subCatToEdit.importance</span>
                @if (subCatToEdit.importance == 0)
                {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 0)" checked />
                <label>רצון</label>
                }
                else
                {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 0)" />
                <label>רצון</label>
                }
                @if (subCatToEdit.importance == 1)
                {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 1)" checked />
                <label>צורך</label>
                }
                else
                {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 1)" />
                <label>צורך</label>
                }
                @if (subCatToEdit.importance == 2)
                {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 2)" checked />
                <label>חובה</label>
                }
                else
                {
                <input type="radio"
               name="importance" @onchange="@(() => subCatToEdit.importance = 2)" />
                <label>חובה</label>
                }
        </div>
        <div>
            <p>לדוגמה: לק - רוצה, דלק - צריך, חייב - שכ״ד. העדיפות משפיעה על הטיפים שתקבל לייעול התקציב שלך.</p>
        </div>
        <br />
        <button class="submit-btn" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הזנה</button>
        <button class="submit-btn" @onclick="saveUpdatedSubCat">שמירה וסיום</button>
    </div>
        </div>
}


@code {

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public string subCategoryTitle { get; set; }

    [Parameter]
    public string categoryTitle { get; set; }

    [Parameter]
    public int subCategoryIDToGet { get; set; }

    [Parameter]
    public double totalSpendings { get; set; }



    [Parameter]

    public EventCallback<List<OverDraftBudgetToEdit>> subCatTakenBudget { get; set; }

    [Parameter]

    public EventCallback refreshSubCats { get; set; }

    [Parameter]
    public double? budget { get; set; }

    [Parameter]
    public EventCallback<SubCategoryToEdit> updateEditedSubCat { get; set; }

    [Parameter]
    public int categoryID { get; set; }

    [Parameter]
    public EventCallback<int> subCatDeleted { get; set; }

    [Parameter]
    public bool categoryTypeIndicator { get; set; } //will indicate if this is an expense or income subcategory

    SubCategoryToEdit subCatToEdit = new SubCategoryToEdit();
    SubCategoryToUpdate subCategoryToUpdate = new SubCategoryToUpdate();

    List<AllUserCategories> userCategories = new List<AllUserCategories>();

    bool isOptBtnClicked = false; //the options button
    bool editSubCatBtnClicked = false;
    bool deleteBtnClicked = false;
    string popupBodyText = "";

    public bool openTransOverlay = false;

    public void openAddTransOverlay()
    {
        openTransOverlay = !openTransOverlay;
    }

    public void gapsToUpdateTheBudget(List<OverDraftBudgetToEdit> gaps)
    {
        subCatTakenBudget.InvokeAsync(gaps);

    }



    public async Task getUserCategories()
    {
        //editSubCatBtnClicked = true;
        subCatToEdit.categroyTitle = categoryTitle;
        subCatToEdit.monthlyPlannedBudget = budget;
        subCatToEdit.subCategoryTitle = subCategoryTitle;
        subCatToEdit.id = subCategoryIDToGet;
        subCatToEdit.categoryID = categoryID;
        var getSubCatImportance = await Http.GetAsync("api/Present/GetSubCatImportance/" + subCatToEdit.id);
        if (getSubCatImportance.IsSuccessStatusCode)
        {
            subCatToEdit.importance = await getSubCatImportance.Content.ReadFromJsonAsync<int>();
        }
        else
        {
            Console.WriteLine("couldn't find this sub cat's importance");
        }

        if (!categoryTypeIndicator)
        {
            var getAllUserCategories = await Http.GetAsync("api/Present/GetUserCategories/" + userID);
            if (getAllUserCategories.IsSuccessStatusCode)
            {
                userCategories = await getAllUserCategories.Content.ReadFromJsonAsync<List<AllUserCategories>>().ConfigureAwait(false);

                //arranges the category dropdown so the current category will be the one initially displayed
                List<AllUserCategories> tempUserCategories = new List<AllUserCategories>();
                foreach (AllUserCategories category in userCategories)
                {
                    if (category.id == categoryID)
                    {
                        tempUserCategories.Insert(0, category);
                    }
                    else
                    {
                        tempUserCategories.Add(category);
                    }

                }
                userCategories = tempUserCategories;

            }
            else
            {
                Console.WriteLine("no Categories found");
            }
        }
        else
        {
            var getIncomeCat = await Http.GetAsync("api/Present/GetCategoryToEdit/" + subCatToEdit.categoryID);
            if (getIncomeCat.IsSuccessStatusCode)
            {
                CategoryToShow returnedCat = await getIncomeCat.Content.ReadFromJsonAsync<CategoryToShow>();
                AllUserCategories incomeCat = new AllUserCategories();
                incomeCat.id = returnedCat.id;
                incomeCat.categroyTitle = returnedCat.categroyTitle;
                userCategories = new List<AllUserCategories>();
                userCategories.Add(incomeCat);
            }
        }
        editSubCatBtnClicked = !editSubCatBtnClicked;
    }

    public async Task saveUpdatedSubCat()
    {
        subCategoryToUpdate.subCategoryTitle = subCatToEdit.subCategoryTitle;
        subCategoryToUpdate.importance = subCatToEdit.importance;
        foreach (AllUserCategories category in userCategories)
        {
            if (category.categroyTitle == subCatToEdit.categroyTitle)
            {
                subCatToEdit.categoryID = category.id;
            }
        }
        subCategoryToUpdate.categoryID = subCatToEdit.categoryID;
        subCategoryToUpdate.id = subCatToEdit.id;
        subCategoryToUpdate.monthlyPlannedBudget = subCatToEdit.monthlyPlannedBudget;

        var updateCatRes = await Http.PostAsJsonAsync("api/Present/EditSubCategory/", subCategoryToUpdate);
        if (updateCatRes.IsSuccessStatusCode)
        {
            SubCategoryToUpdate updatedSubCat = await updateCatRes.Content.ReadFromJsonAsync<SubCategoryToUpdate>();
            subCatToEdit.subCategoryTitle = updatedSubCat.subCategoryTitle;
            subCatToEdit.importance = updatedSubCat.importance;
            subCatToEdit.monthlyPlannedBudget = updatedSubCat.monthlyPlannedBudget;

            updateEditedSubCat.InvokeAsync(subCatToEdit);

            editSubCatBtnClicked = false; //closeing the edit overlay

            Console.WriteLine("sub category updated");

        }
        else
        {
            Console.WriteLine("failed to update category");
        }
    }


    public void deleteSubCatPopUp()
    {
        deleteBtnClicked = !deleteBtnClicked;
        popupBodyText = "תת הקטגוריה '" + subCategoryTitle + "' עומדת להמחק";
    }
    public async Task deleteSubCat()
    {
        var deleteRes = await Http.DeleteAsync("api/Present/deleteSubCategory/" + subCategoryIDToGet);
        if (deleteRes.IsSuccessStatusCode)
        {
            subCatDeleted.InvokeAsync(subCategoryIDToGet);
        }
        else
        {
            Console.WriteLine(" בעיה במחיקת תת- קטגוריה");
        }
    }

    public void addNewTransToTotalSpendings(double transactionValue)
    {
        totalSpendings += transactionValue;
    }

    public void goToTransactionsPage()
    {
        nav.NavigateTo("./TransactionsOverview/" + subCategoryIDToGet + "/" + categoryID + "/" + budget + "/" + userID);
    }

    public async Task addSubCategoryAndTransaction()
    {

    }

}