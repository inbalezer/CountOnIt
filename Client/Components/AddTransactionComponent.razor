@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toEdit
@using System;
@using System.Globalization;
@inject HttpClient Http

<button class="modal-close-btn" @onclick="transOverlayControl">&times;</button>
@if (isItAnewTrans)
{
    <h3>@overlayTitle:  </h3>
    <h4>@subCategoryTitle</h4>
}
else
{
    <h3>@overlayTitle</h3>
}

<div>

    <button @onclick="() => isTopDropDownOpen = !isTopDropDownOpen">פרטי ההזנה שלי</button>

    @if (isTopDropDownOpen)
    {
        <div>
            <p>פרטי ההזנה</p>
            <input type="text" @bind="newTransaction.transTitle" />

            <input type="date" @bind="newTransaction.transDate" />

            <p>סכום ההזנה</p>
            <input type="number" @bind="newTransaction.transValue" />
            <p>ההזנה בתשלומים?</p>
            <input type="checkbox" @bind="splitPayment" />
            @if (splitPayment)
            {
                <select @bind="selectedNumber">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@i תשלומים</option>

                    }
                    selectedNumber = i;
                </select>

                <p>סכום כל תשלום בממוצע @(newTransaction.transValue / selectedNumber) ₪</p>
            }
            <p>אמצעי תשלום</p>

            @if (newTransaction.valueType == null)
            {
                newTransaction.valueType = "מזומן";
            }

            <select @bind="newTransaction.valueType">

                <option value="מזומן">מזומן</option>
                <option value="אשראי">אשראי</option>
                <option value="ביט/פייבוקס">ביט/פייבוקס</option>
                <option value="אחר">אחר</option>

            </select>
            @if (!string.IsNullOrEmpty(newTransaction.valueType))
            {
                <p>שיטת תשלום נבחרת: @newTransaction.valueType</p>
            }
            <button @onclick="repeatingTransOverlay">הגדרת ההוצאה כחוזרת</button>@* לעשות קומפוננטה של חלון הגדרת הוצאה כחוזרת*@
            @if (returningTrans)
            {
                <h4>הגדרת @newTransaction.transTitle כהוצאה חוזרת על עצמה</h4>
                <p>במידה וההוצאה חוזרת בסכום שונה, יש להזין את הסכום הרצוי. בחודש בו אינה חוזרת, יש להזין 0.</p>
                @if (resetMonthValues == false)
                {
                    @foreach (string month in months)
                    {

                        <div>
                            <label style="@(GetCurrentMonth() == month ? "background-color: cornflowerblue;" : "")">@GetHebrewMonthName(month)</label>
                            <input type="text"
                   disabled="@IsPastMonth(month)" value="@GetDefaultValue(month)" @oninput="eventArgs => HandleInput(eventArgs, month)" />
                        </div>
                    }

                    <button>שמירה וחזרה</button>
                    <button @onclick="() => resetMonthValues = !resetMonthValues">איפוס סכומים חוזרים</button>
                }
                else
                {
                    @foreach (string month in months)
                    {
                        <div>
                            <label style="@(GetCurrentMonth() == month ? "background-color: cornflowerblue;" : "")">@GetHebrewMonthName(month)</label>
                            <input type="text"
                   disabled="@IsPastMonth(month)" value="0" @oninput="eventArgs => HandleInput(eventArgs, month)" />
                        </div>
                    }
                    @if (isValueTyped)
                    {
                        <button>שמירה וחזרה</button>
                    }
                    else
                    {
                        <button disabled>שמירה וחזרה</button>

                    }
                    <button @onclick="() => resetMonthValues = !resetMonthValues">לסכומים המקוריים</button>
                }
            }
        </div>
    }

    <button @onclick="@(async () => await getAllUserTags())">הגדרות מתקדמות</button>

    @if (isButtomDropDownOpen)
    {
        <div>
            <p>תגית</p>
            <p>@chosenTag.tagTitle</p>
            @if (isItAnewTrans || newTransaction.tagID == null)
            {
                <button @onclick="() => openTagsMenu = !openTagsMenu">➕</button>
            }
            else
            {
                @*chosenTag.tagTitle = newTransaction.tagTitle;*@


                @foreach (TagsToShow tag in allUserTags)
                {
                    string buttonStyle = "background-color:" + tag.tagColor + ";";

                    @if (tag.id == newTransaction.tagID)
                    {
                        buttonStyle += "border: 2px solid black;";
                        <button @onclick="(() => ChooseTagForTrans(tag))" style=@buttonStyle>@tag.tagTitle</button>
                    }
                    else
                    {
                        buttonStyle += "border: none;";
                        <button @onclick="(() => ChooseTagForTrans(tag))" style=@buttonStyle>@tag.tagTitle</button>
                    }
                }
            }

            @if (openTagsMenu)
            {
                @foreach (TagsToShow tag in allUserTags)
                {
                    <button @onclick="(() => ChooseTagForTrans(tag))" style="background-color:@tag.tagColor">@tag.tagTitle</button>
                }
            }


        </div>

        <p>פירוט:</p>
        <input type="text" />
    }
</div>

@if (isItAnewTrans)
{
    <button @onclick="saveAndRepeatTransactions">שמירה והזנה נוספת</button>
    <button @onclick="saveAndEndTransactions">שמירה וסיום</button>

}
else
{
    <button @onclick="updateExistingTrans">שמירה וסיום</button>
}

@if (overdraftDetected)
{
    <div>
        <h3>חרגת...</h3>
        <p>נראה שהוצאת ב @subCategoryTitle @closeOverdraftOpts[closeOverdraftOpts.Count-1].remainingBudget ₪ </p>
        <p>שזה @currentGap ₪ יותר </p>
        <p>מהתקציב שהגדרת: @closeOverdraftOpts[closeOverdraftOpts.Count-1].monthlyPlannedBudget ₪ </p>
        <p>כדאי להגדיל את התקציב.</p>
        <p>הסכום שאני רוצה להעביר:</p>
        <input type="number" @bind="currentGap" min="@currentGap" /><span>₪</span>
        <p>מאיזו תת קטגוריה יועבר הסכום?</p>

        <table>
            <thead>
                <tr>
                    <th>העברה מ:</th>
                    <th>העברה ל:</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <select @onchange="HandleChange">
                            @foreach (OverBudgetToShow subcategoryOpt in closeOverdraftOpts)
                            {
                                @if (subcategoryOpt.id != subCategoryIDTOGet)
                                {
                                    <option value="@subcategoryOpt.subCategoryTitle">
                                        @subcategoryOpt.subCategoryTitle
                                    </option>
                                }
                            }
                        </select>
                    </td>
                    <td>
                        @(overDraftSubCategory.subCategoryTitle = closeOverdraftOpts[closeOverdraftOpts.Count - 1].subCategoryTitle)

                    </td>
                </tr>
                <tr>
                    <p>תקציב:</p>
                    <p>נוכחי: @chosenSubCategory.monthlyPlannedBudget</p>
                    <p>עתידי: @(chosenSubCategory.monthlyPlannedBudget - currentGap)</p>

                </tr>
                <tr>
                    <p>תקציב:</p>
                    <p>נוכחי: @(closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget)</p>
                    <p>עתידי: @(closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget + currentGap)</p>
                </tr>
            </tbody>
        </table>
        <button @onclick="manageBudgetsToTranfer">העברה</button>
        <button @onclick="@(async () => await closeOverdraftWindow())">אטפל בהמשך</button>
    </div>
}

@code {

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public string subCategoryTitle { get; set; }

    [Parameter]
    public int subCategoryIDTOGet { get; set; }

    [Parameter]
    public EventCallback<List<OverDraftBudgetToEdit>> gapsToUpdateBudgets { get; set; }

    [Parameter]
    public EventCallback<bool> isTransactionOverlayOpen { get; set; }

    [Parameter]
    public EventCallback<double> addTransactionToTotal { get; set; }

    [Parameter]
    public TransactionToAdd newTransaction { get; set; }

    [Parameter]
    public int transIDtoEdit { get; set; }

    [Parameter]
    public EventCallback<TransactionOverviewToShow> addTransactionAfterEdit { get; set; }

    [Parameter]
    public EventCallback<bool> overdraftNotTreated { get; set; }

    List<OverBudgetToShow> closeOverdraftOpts = new List<OverBudgetToShow>();
    List<OverDraftBudgetToEdit> budgetToUpdate = new List<OverDraftBudgetToEdit>();
    List<TagsToShow> allUserTags = new List<TagsToShow>();

    TagsToShow chosenTag = new TagsToShow();
    OverBudgetToShow chosenSubCategory = new OverBudgetToShow();
    OverBudgetToShow overDraftSubCategory = new OverBudgetToShow();
    OverDraftBudgetToEdit subCategoryBudgetToUpdate = new OverDraftBudgetToEdit();


    private DateTime? selectedDate = DateTime.Today; // Initialize selectedDate to today
    private bool isItAnewTrans = false;
    //public bool isTagClicked = false;
    public bool overdraftDetected;
    bool splitPayment = false;
    bool isTopDropDownOpen = true;
    bool isButtomDropDownOpen = false;
    bool openTagsMenu = false;
    private int selectedNumber = 1; // Default value
    double currentGap = 0;
    public string overlayTitle = "";
    //string clikckedTag => isTagClicked ? "border: solid,0.1em,black" : "border:none";
    bool returningTrans = false;

    int monthNum = 0;
    bool resetMonthValues = false;
    private List<string> months = new List<string>
    {
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    };
    private bool isValueTyped = false;
    private string GetCurrentMonth() => DateTime.Now.ToString("MMMM");
    private Dictionary<string, string> monthsAndValues = new Dictionary<string, string>();
    List<TransactionToAdd> transactionsToAdd = new List<TransactionToAdd>();

    public string GetHebrewMonthName(string month)
    {
        return month switch
        {
            "January" => "ינואר",
            "February" => "פברואר",
            "March" => "מרץ",
            "April" => "אפריל",
            "May" => "מאי",
            "June" => "יוני",
            "July" => "יולי",
            "August" => "אוגוסט",
            "September" => "ספטמבר",
            "October" => "אוקטובר",
            "November" => "נובמבר",
            "December" => "דצמבר",
            _ => "חודש לא תקין",
        };
    }

    private bool IsPastMonth(string month)
    {
        int currentMonthIndex = months.IndexOf(GetCurrentMonth());
        int monthIndex = months.IndexOf(month);
        return monthIndex < currentMonthIndex;
    }
    private string GetDefaultValue(string month)
    {
        return IsPastMonth(month) ? "0" : newTransaction.transValue.ToString();
    }

    private void HandleInput(ChangeEventArgs e, string monthName)
    {
        int currentDay = DateTime.Now.Day;
        int currentYear = DateTime.Now.Year;

        // Build the date string using today's day, the given month, and the current year
        string dateString = $"{currentDay} {monthName} {currentYear}";

        DateTime date;
        if (DateTime.TryParseExact(dateString, "d MMMM yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out date))
        {
            Console.WriteLine(date.ToString("yyyy-MM-dd"));
        }
        else
        {
            Console.WriteLine("Invalid month name or format.");
        }
        string newValue = e.Value?.ToString();
        if (int.TryParse(newValue, out int _))
        {
            isValueTyped = true;  // Set the flag to true if the input is a number

        }
        if (newValue==null || newValue=="")
        {
            newValue = "0";
        }

        foreach (TransactionToAdd repeatedTrans in transactionsToAdd)
        {
            if (repeatedTrans.transDate == date)
            {
                repeatedTrans.transValue = double.Parse(newValue);
            }

        }
    }
    protected override async Task OnInitializedAsync()
    {

        if (newTransaction == null)
        {
            newTransaction = new TransactionToAdd()
                {
                    transDate = DateTime.Today // Set the transaction date to today
                };
            overlayTitle = "הוספה לתת קטגוריה: ";
            isItAnewTrans = true;
        }
        else
        {
            overlayTitle = "עריכת הזנה";
            isItAnewTrans = false;
        }

        if (newTransaction.tagID > 0)
        {
            chosenTag.tagTitle = newTransaction.tagTitle;
        }
    }

    private void HandleChange(ChangeEventArgs e)
    {
        var selectedTitle = e.Value.ToString();
        chosenSubCategory = closeOverdraftOpts.FirstOrDefault(opt => opt.subCategoryTitle == selectedTitle);
    }



    public async Task saveAndEndTransactions()
    {
        newTransaction.subCategoryID = subCategoryIDTOGet;
        newTransaction.transType = 1;
        newTransaction.tagID = null;

        if (chosenTag.id > 0)
        {
            newTransaction.tagID = chosenTag.id;
        }


        var transToSaveRes = await Http.PostAsJsonAsync("api/Transactions/AddTransaction", newTransaction);
        if (transToSaveRes.IsSuccessStatusCode)
        {
            transIDtoEdit = await transToSaveRes.Content.ReadFromJsonAsync<int>();
            await checkOverdraft();
            if (!overdraftDetected)
            {
                await saveRepeatedTransactions(transIDtoEdit);
                Console.WriteLine("ההזנה נשמרה בהצלחה :)");
                addTransactionToTotal.InvokeAsync(newTransaction.transValue);
                isTransactionOverlayOpen.InvokeAsync(false);


            }
        }
        else
        {
            Console.WriteLine("הזנה נכשלה");
        }

    }

    public async Task saveAndRepeatTransactions()
    {
        newTransaction.subCategoryID = subCategoryIDTOGet;
        newTransaction.transType = 1;

        var transToSaveRes = await Http.PostAsJsonAsync("api/Transactions/AddTransaction", newTransaction);
        if (transToSaveRes.IsSuccessStatusCode)
        {
            transIDtoEdit = await transToSaveRes.Content.ReadFromJsonAsync<int>();
            Console.WriteLine("ההזנה נשמרה בהצלחה :)");
            await checkOverdraft();
            if (!overdraftDetected)
            {
                addTransactionToTotal.InvokeAsync(newTransaction.transValue);
                newTransaction = new TransactionToAdd();
            }

        }
        else
        {
            Console.WriteLine("הזנה נכשלה");
        }
    }
    public async Task updateExistingTrans()
    {

        TransactionToEdit transToEdit = new TransactionToEdit()
            {
                id = transIDtoEdit,
                transValue = newTransaction.transValue,
                transType = newTransaction.transType,
                valueType = newTransaction.valueType,
                transDate = newTransaction.transDate,
                fixedMonthly = newTransaction.fixedMonthly,
                tagID = chosenTag.id,
                tagColor = chosenTag.tagColor,
                tagTitle = chosenTag.tagTitle,
                transTitle = newTransaction.transTitle,
                parentTransID = newTransaction.parentTransID,
                description = newTransaction.description
            };

        await checkOverdraft();
        if (!overdraftDetected)
        {
            transToEdit.transType = 1;
        }


        var transEditRes = await Http.PostAsJsonAsync("api/Transactions/editTransaction", transToEdit);
        if (transEditRes.IsSuccessStatusCode)
        {
            Console.WriteLine("ההזנה עודכנה בהצלחה :)");
            await checkOverdraft();
            if (overdraftDetected)
            {
                var transOverdraftRes = await Http.GetAsync("api/Transactions/updateOverDraftTrans/" + transToEdit.id); //updates the transType to 3
                if (transOverdraftRes.IsSuccessStatusCode)
                {
                    Console.WriteLine("ההזנה עודכנה לחורגת בהצלחה :)");
                }
            }
            TransactionToEdit postEditTrans = await transEditRes.Content.ReadFromJsonAsync<TransactionToEdit>();
            if (postEditTrans != null)
            {
                TransactionOverviewToShow editedTransaction = new TransactionOverviewToShow();
                editedTransaction.id = postEditTrans.id;
                editedTransaction.transValue = postEditTrans.transValue;
                editedTransaction.transType = postEditTrans.transType;
                editedTransaction.valueType = postEditTrans.valueType;
                editedTransaction.transDate = postEditTrans.transDate.ToShortDateString();
                editedTransaction.fixedMonthly = postEditTrans.fixedMonthly;
                editedTransaction.tagID = postEditTrans.tagID;
                editedTransaction.tagColor = postEditTrans.tagColor;
                editedTransaction.tagTitle = postEditTrans.tagTitle;
                editedTransaction.transTitle = postEditTrans.transTitle;
                editedTransaction.parentTransID = postEditTrans.parentTransID;
                editedTransaction.description = postEditTrans.description;

                addTransactionAfterEdit.InvokeAsync(editedTransaction);

            }

            if (!overdraftDetected)
            {
                isTransactionOverlayOpen.InvokeAsync(false);
            }


        }
    }

    public async Task manageBudgetsToTranfer()
    {
        budgetToUpdate = new List<OverDraftBudgetToEdit>();

        budgetToUpdate.Add(new OverDraftBudgetToEdit
            {
                id = chosenSubCategory.id,  // ID of chosen subcategory
                monthlyPlannedBudget = chosenSubCategory.monthlyPlannedBudget - currentGap // Updated budget

            });


        budgetToUpdate.Add(new OverDraftBudgetToEdit
            {
                id = overDraftSubCategory.id, // ID of the overdraft subcategory
                monthlyPlannedBudget = overDraftSubCategory.monthlyPlannedBudget + currentGap // Updated budget
            });

        Console.WriteLine(budgetToUpdate[1].monthlyPlannedBudget);
        Console.WriteLine(budgetToUpdate[1].id);
        Console.WriteLine(overDraftSubCategory.id);
        Console.WriteLine(overDraftSubCategory.monthlyPlannedBudget);

        await updateSubCategoryBudget(budgetToUpdate);

    }

    public async Task checkOverdraft()
    {
        var overdraftRes = await Http.GetAsync("api/Transactions/showOverdraft/" + newTransaction.subCategoryID + "/" + userID);
        if (overdraftRes.IsSuccessStatusCode)
        {
            overdraftDetected = true;
            closeOverdraftOpts = new List<OverBudgetToShow>();
            closeOverdraftOpts = await overdraftRes.Content.ReadFromJsonAsync<List<OverBudgetToShow>>();
            currentGap = (closeOverdraftOpts[closeOverdraftOpts.Count - 1].remainingBudget) - (closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget);

            overDraftSubCategory.id = closeOverdraftOpts[closeOverdraftOpts.Count - 1].id;
            overDraftSubCategory.monthlyPlannedBudget = closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget;
            chosenSubCategory = closeOverdraftOpts[0];


        }
        else
        {
            Console.WriteLine("No overdraft detected");

        }
    }

    public async Task updateSubCategoryBudget(List<OverDraftBudgetToEdit> budgetsToUpdate)
    {

        var budgetToSaveRes = await Http.PostAsJsonAsync("api/Transactions/EditSubCategoriesNewBudgets", budgetsToUpdate);
        if (budgetToSaveRes.IsSuccessStatusCode)
        {
            Console.WriteLine("התקציבים עודכנו בהצלחה :)");

            overdraftDetected = false;
            isTransactionOverlayOpen.InvokeAsync(false);
            gapsToUpdateBudgets.InvokeAsync(budgetsToUpdate);



        }
        else
        {
            Console.WriteLine("עדכון התקציבים נכשל");
        }
    }


    public async Task closeOverdraftWindow()
    {

        var transOverdraftRes = await Http.GetAsync("api/Transactions/updateOverDraftTrans/" + transIDtoEdit); //updates the transType to 3
        if (transOverdraftRes.IsSuccessStatusCode)
        {

            overdraftNotTreated.InvokeAsync(true);

        }
        else
        {
            Console.WriteLine("update trans type failed");

        }

        overdraftDetected = true;
        addTransactionToTotal.InvokeAsync(newTransaction.transValue);
        isTransactionOverlayOpen.InvokeAsync(false);

    }




    public void transOverlayControl()
    {
        isTransactionOverlayOpen.InvokeAsync(false);
    }



    public async Task getAllUserTags()
    {

        isButtomDropDownOpen = !isButtomDropDownOpen;

        if (isButtomDropDownOpen)
        {
            var allTagsRes = await Http.GetAsync("api/Transactions/getAllUserTags/" + userID);
            if (allTagsRes.IsSuccessStatusCode)
            {
                allUserTags = await allTagsRes.Content.ReadFromJsonAsync<List<TagsToShow>>();
            }
            else
            {
                Console.WriteLine("No tags found");
            }
        }
    }

    public void ChooseTagForTrans(TagsToShow tag)
    {
        chosenTag = tag;

    }

    private DateTime parsedDate;
    private bool attemptedParsing = false;

    public void repeatingTransOverlay()
    {
        returningTrans = !returningTrans;
        transactionsToAdd = new List<TransactionToAdd>();
        int currentDay = DateTime.Now.Day;
        int currentYear = DateTime.Now.Year;
        foreach (string m in months)
        {
            string dateString = $"{currentDay} {m} {currentYear}";

            DateTime tempDate;
            if (DateTime.TryParseExact(dateString, "d MMMM yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out tempDate))
            {
                parsedDate = tempDate;
            }
            else
            {
                Console.WriteLine("date parsing failed");
            }
            attemptedParsing = true;


            TransactionToAdd childTrans = new TransactionToAdd()
                {
                    transValue = newTransaction.transValue,
                    valueType = newTransaction.valueType,
                    description = newTransaction.description,
                    fixedMonthly = newTransaction.fixedMonthly,
                    parentTransID = newTransaction.parentTransID,
                    tagID = newTransaction.tagID,
                    tagTitle = newTransaction.tagTitle,
                    tagColor = newTransaction.tagColor,
                    transTitle = newTransaction.transTitle,
                    subCategoryID = subCategoryIDTOGet,
                    transDate = parsedDate,
                    transType = newTransaction.transType
                };
            transactionsToAdd.Add(childTrans);

        }
    }

    public async Task saveRepeatedTransactions(int parentTransID)
    {
        transactionsToAdd.RemoveAll(e => e.transDate <= DateTime.Now);
        foreach (TransactionToAdd repT in transactionsToAdd)
        {
            if (repT.transValue>0)
            {
                repT.parentTransID = parentTransID;
                repT.tagID = newTransaction.tagID;
                repT.tagColor = newTransaction.tagColor;
                repT.tagTitle = newTransaction.tagTitle;
            }
            else
            {
                transactionsToAdd.Remove(repT);
            }

        }

        foreach (TransactionToAdd repT in transactionsToAdd)
        {
            var transToSaveRes = await Http.PostAsJsonAsync("api/Transactions/AddTransaction", repT);
            if (transToSaveRes.IsSuccessStatusCode)
            {
                Console.WriteLine("ההזנה של תאריך " + repT.transDate + " נקלטה בהצלחה, שערכה הוא " + repT.transValue);
            }
            else
            {
                Console.WriteLine("הזנה נכשלה");
            }
        }

    }
}