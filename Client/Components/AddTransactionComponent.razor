@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toEdit
@inject HttpClient Http

<button class="modal-close-btn" @onclick="transOverlayControl">&times;</button>
@if (isItAnewTrans)
{
    <h3>@overlayTitle:  </h3>
    <h4>@subCategoryTitle</h4>
}
else
{
    <h3>@overlayTitle</h3>
}

<div>

    <button>פרטי ההזנה שלי</button>
    <p>פרטי ההזנה</p>
    <input type="text" @bind="newTransaction.transTitle" />

    <input type="date" @bind="newTransaction.transDate" />

    <p>סכום ההזנה</p>
    <input type="number" @bind="newTransaction.transValue" />
    <p>ההזנה בתשלומים?</p>
    <input type="checkbox" @bind="splitPayment" />
    @if (splitPayment)
    {
        <select @bind="selectedNumber">
            @for (int i = 1; i <= 12; i++)
            {
                <option value="@i">@i תשלומים</option>

            }
            selectedNumber = i;
        </select>

        <p>סכום כל תשלום בממוצע @(newTransaction.transValue / selectedNumber) ₪</p>
    }
    <p>אמצעי תשלום</p>
    @if (newTransaction.valueType == null)
    {
        newTransaction.valueType = "מזומן";
    }
    <select @bind="newTransaction.valueType">

        <option value="מזומן">מזומן</option>
        <option value="אשראי">אשראי</option>
        <option value="ביט/פייבוקס">ביט/פייבוקס</option>
        <option value="אחר">אחר</option>

    </select>
    @if (!string.IsNullOrEmpty(newTransaction.valueType))
    {
        <p>שיטת תשלום נבחרת: @newTransaction.valueType</p>
    }
    <button>הגדרת ההוצאה כחוזרת</button>@* לעשות קומפוננטה של חלון הגדרת הוצאה כחוזרת*@
</div>
<div>
    <button>הגדרות מתקדמות</button>
    @*    להוסיף את כל מה שהסקשן הזה מכיל*@
</div>
@if (isItAnewTrans)
{
    <button @onclick="saveAndRepeatTransactions">שמירה והזנה נוספת</button>
    <button @onclick="saveAndEndTransactions">שמירה וסיום</button>
}
else
{
    <button @onclick="updateExistingTrans">שמירה וסיום</button>
}

@if (overdraftDetected)
{
    <div>
        <h3>חרגת...</h3>
        <p>נראה שהוצאת ב @subCategoryTitle @closeOverdraftOpts[closeOverdraftOpts.Count-1].remainingBudget ₪ </p>
        <p>שזה @currentGap ₪ יותר </p>
        <p>מהתקציב שהגדרת: @closeOverdraftOpts[closeOverdraftOpts.Count-1].monthlyPlannedBudget ₪ </p>
        <p>כדאי להגדיל את התקציב.</p>
        <p>הסכום שאני רוצה להעביר:</p>
        <input type="number" @bind="currentGap" min="@currentGap" /><span>₪</span>
        <p>מאיזו תת קטגוריה יועבר הסכום?</p>

        <table>
            <thead>
                <tr>
                    <th>העברה מ:</th>
                    <th>העברה ל:</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <select @onchange="HandleChange">
                            @foreach (OverBudgetToShow subcategoryOpt in closeOverdraftOpts)
                            {
                                @if (subcategoryOpt.id != subCategoryIDTOGet)
                                {
                                    <option value="@subcategoryOpt.subCategoryTitle">
                                        @subcategoryOpt.subCategoryTitle
                                    </option>
                                }
                            }
                        </select>
                    </td>
                    <td>
                        @(overDraftSubCategory.subCategoryTitle = closeOverdraftOpts[closeOverdraftOpts.Count - 1].subCategoryTitle)

                    </td>
                </tr>
                <tr>
                    <p>תקציב:</p>
                    <p>נוכחי: @chosenSubCategory.monthlyPlannedBudget</p>
                    <p>עתידי: @(chosenSubCategory.monthlyPlannedBudget - currentGap)</p>

                </tr>
                <tr>
                    <p>תקציב:</p>
                    <p>נוכחי: @(closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget)</p>
                    <p>עתידי: @(closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget + currentGap)</p>
                </tr>
            </tbody>
        </table>
        <button @onclick="manageBudgetsToTranfer">העברה</button>
        <button @onclick="closeOverdraftWindow">אטפל בהמשך</button>
    </div>
}

@code {

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public string subCategoryTitle { get; set; }

    [Parameter]
    public int subCategoryIDTOGet { get; set; }

    [Parameter]
    public EventCallback<List<OverDraftBudgetToEdit>> gapsToUpdateBudgets { get; set; }

    [Parameter]
    public EventCallback<bool> isTransactionOverlayOpen { get; set; }

    [Parameter]
    public EventCallback<double> addTransactionToTotal { get; set; }

    [Parameter]
    public TransactionToAdd newTransaction { get; set; }

    [Parameter]
    public int transIDtoEdit { get; set; }

    [Parameter]
    public EventCallback<TransactionOverviewToShow> addTransactionAfterEdit { get; set; }

    [Parameter]
    public EventCallback<bool> overdraftNotTreated { get; set; }

    private DateTime? selectedDate = DateTime.Today; // Initialize selectedDate to today
    private bool isItAnewTrans = false;


    bool splitPayment = false;
    public bool overdraftDetected;
    private int selectedNumber = 1; // Default value
    double currentGap = 0;

    List<OverBudgetToShow> closeOverdraftOpts = new List<OverBudgetToShow>();
    List<OverDraftBudgetToEdit> budgetToUpdate = new List<OverDraftBudgetToEdit>();


    OverBudgetToShow chosenSubCategory = new OverBudgetToShow();
    OverBudgetToShow overDraftSubCategory = new OverBudgetToShow();
    OverDraftBudgetToEdit subCategoryBudgetToUpdate = new OverDraftBudgetToEdit();

    public string overlayTitle = "";

    protected override async Task OnInitializedAsync()
    {
        if (newTransaction == null)
        {
            newTransaction = new TransactionToAdd()
                {
                    transDate = DateTime.Today // Set the transaction date to today
                };
            overlayTitle = "הוספה לתת קטגוריה: ";
            isItAnewTrans = true;
        }
        else
        {
            overlayTitle = "עריכת הזנה";
            isItAnewTrans = false;
        }
    }

    private void HandleChange(ChangeEventArgs e)
    {
        var selectedTitle = e.Value.ToString();
        chosenSubCategory = closeOverdraftOpts.FirstOrDefault(opt => opt.subCategoryTitle == selectedTitle);
    }



    public async Task saveAndEndTransactions()
    {
        newTransaction.subCategoryID = subCategoryIDTOGet;
        newTransaction.transType = 1;

        var transToSaveRes = await Http.PostAsJsonAsync("api/Transactions/AddTransaction", newTransaction);
        if (transToSaveRes.IsSuccessStatusCode)
        {
            await checkOverdraft();
            if (!overdraftDetected)
            {
                Console.WriteLine("ההזנה נשמרה בהצלחה :)");
                addTransactionToTotal.InvokeAsync(newTransaction.transValue);
                isTransactionOverlayOpen.InvokeAsync(false);


            }
        }
        else
        {
            Console.WriteLine("הזנה נכשלה");
        }

    }

    public async Task saveAndRepeatTransactions()
    {
        newTransaction.subCategoryID = subCategoryIDTOGet;
        newTransaction.transType = 1;

        var transToSaveRes = await Http.PostAsJsonAsync("api/Transactions/AddTransaction", newTransaction);
        if (transToSaveRes.IsSuccessStatusCode)
        {
            Console.WriteLine("ההזנה נשמרה בהצלחה :)");
            await checkOverdraft();
            if (!overdraftDetected)
            {
                addTransactionToTotal.InvokeAsync(newTransaction.transValue);
                newTransaction = new TransactionToAdd();
            }

        }
        else
        {
            Console.WriteLine("הזנה נכשלה");
        }
    }
    public async Task updateExistingTrans()
    {
        TransactionToEdit transToEdit = new TransactionToEdit()
            {
                id = transIDtoEdit,
                transValue = newTransaction.transValue,
                transType = newTransaction.transType,
                valueType = newTransaction.valueType,
                transDate = newTransaction.transDate,
                fixedMonthly = newTransaction.fixedMonthly,
                tagID = newTransaction.tagID,
                transTitle = newTransaction.transTitle,
                parentTransID = newTransaction.parentTransID,
                description = newTransaction.description
            };
        var transEditRes = await Http.PostAsJsonAsync("api/Transactions/editTransaction", transToEdit);
        if (transEditRes.IsSuccessStatusCode)
        {
            Console.WriteLine("ההזנה עודכנה בהצלחה :)");
            await checkOverdraft();
            TransactionToEdit postEditTrans = await transEditRes.Content.ReadFromJsonAsync<TransactionToEdit>();
            if (!overdraftDetected)
            {
                TransactionOverviewToShow editedTransaction = new TransactionOverviewToShow();
                editedTransaction.id = postEditTrans.id;
                editedTransaction.transValue = postEditTrans.transValue;
                editedTransaction.transType = postEditTrans.transType;
                editedTransaction.valueType = postEditTrans.valueType;
                editedTransaction.transDate = postEditTrans.transDate.ToShortDateString();
                editedTransaction.fixedMonthly = postEditTrans.fixedMonthly;
                editedTransaction.tagID = postEditTrans.tagID;
                editedTransaction.transTitle = postEditTrans.transTitle;
                editedTransaction.parentTransID = postEditTrans.parentTransID;
                editedTransaction.description = postEditTrans.description;


                addTransactionAfterEdit.InvokeAsync(editedTransaction);

            }

        }
    }

    public async Task manageBudgetsToTranfer()
    {
        budgetToUpdate = new List<OverDraftBudgetToEdit>();

        budgetToUpdate.Add(new OverDraftBudgetToEdit
            {
                id = chosenSubCategory.id,  // ID of chosen subcategory
                monthlyPlannedBudget = chosenSubCategory.monthlyPlannedBudget - currentGap // Updated budget

            });


        budgetToUpdate.Add(new OverDraftBudgetToEdit
            {
                id = overDraftSubCategory.id, // ID of the overdraft subcategory
                monthlyPlannedBudget = overDraftSubCategory.monthlyPlannedBudget + currentGap // Updated budget
            });

        Console.WriteLine(budgetToUpdate[1].monthlyPlannedBudget);
        Console.WriteLine(budgetToUpdate[1].id);
        Console.WriteLine(overDraftSubCategory.id);
        Console.WriteLine(overDraftSubCategory.monthlyPlannedBudget);

        await updateSubCategoryBudget(budgetToUpdate);

    }

    public async Task checkOverdraft()
    {
        var overdraftRes = await Http.GetAsync("api/Transactions/showOverdraft/" + newTransaction.subCategoryID + "/" + userID);
        if (overdraftRes.IsSuccessStatusCode)
        {
            overdraftDetected = true;
            closeOverdraftOpts = new List<OverBudgetToShow>();
            closeOverdraftOpts = await overdraftRes.Content.ReadFromJsonAsync<List<OverBudgetToShow>>();
            currentGap = (closeOverdraftOpts[closeOverdraftOpts.Count - 1].remainingBudget) - (closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget);

            overDraftSubCategory.id = closeOverdraftOpts[closeOverdraftOpts.Count - 1].id;
            overDraftSubCategory.monthlyPlannedBudget = closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget;
            chosenSubCategory = closeOverdraftOpts[0];


        }
        else
        {
            Console.WriteLine("No overdraft detected");

        }
    }

    public async Task updateSubCategoryBudget(List<OverDraftBudgetToEdit> budgetsToUpdate)
    {

        var budgetToSaveRes = await Http.PostAsJsonAsync("api/Transactions/EditSubCategoriesNewBudgets", budgetsToUpdate);
        if (budgetToSaveRes.IsSuccessStatusCode)
        {
            Console.WriteLine("התקציבים עודכנו בהצלחה :)");

            overdraftDetected = false;
            isTransactionOverlayOpen.InvokeAsync(false);
            gapsToUpdateBudgets.InvokeAsync(budgetsToUpdate);



        }
        else
        {
            Console.WriteLine("עדכון התקציבים נכשל");
        }
    }

    void closeOverdraftWindow() //update to transType=3
    {
        overdraftDetected = false;
        isTransactionOverlayOpen.InvokeAsync(false);
        overdraftNotTreated.InvokeAsync(true);
    }
    public void transOverlayControl()
    {
        isTransactionOverlayOpen.InvokeAsync(false);
    }
}