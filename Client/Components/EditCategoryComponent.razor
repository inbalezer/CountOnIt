@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toEdit
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
<h3>@popupTitle</h3>
<input type="text" @bind="categoryToEdit.categroyTitle" disabled="@disabledEditOfIncomeTitle" />*
<button id="emoji-trigger">הוספת אייקון 😊</button>
<input type="text" id="emoji-input" @bind="categoryToEdit.icon">

<span>@categoryToEdit.icon</span>

<div>
    <label for="categoryColors">צבע</label>
    <span>@categoryToEdit.color</span>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#F4B367")" />
    <label>#F4B367</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#7B67F4")" />
    <label>#7B67F4</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#F467AB")" />
    <label>#F467AB</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#F47867")" />
    <label>#F47867</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#678EF4")" />
    <label>#678EF4</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#85E7A0")" />
    <label>#85E7A0</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#67CAF4")" />
    <label>#67CAF4</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#FFEF9D")" />
    <label>#FFEF9D</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#FBEBD7")" />
    <label>#FBEBD7</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#04905E")" />
    <label>#04905E</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#F95050")" />
    <label>#F95050</label>
    <input type="radio"
           name="categoryColors" @onchange="@(() => categoryToEdit.color = "#DADADA")" />
    <label>#DADADA</label>
</div>
@if (popupTitle == "עריכת קטגוריה")
{
    if (ogCatName != "הכנסות" && categoryToEdit.categroyTitle == "הכנסות")
    {
        <button @onclick="saveUpdatedCat" disabled>שמירה וסיום</button>
        <span>לא ניתן לשמור קטגוריה נוספת בשם 'הכנסות'.</span>
    }
    else if (categoryToEdit.categroyTitle == null || categoryToEdit.categroyTitle == "")
    {
        <button @onclick="saveUpdatedCat" disabled>שמירה וסיום</button>
        <span>לא ניתן לשמור קטגוריה ללא שם.</span>
    }

}
else if (popupTitle == "הוספת קטגוריה")
{
    if (ogCatName != "הכנסות" && categoryToEdit.categroyTitle == "הכנסות")
    {
        <button @onclick="addNewCategory" disabled>שמירה וסיום</button>
        <span>לא ניתן לשמור קטגוריה נוספת בשם 'הכנסות'.</span>
    }
    else if (categoryToEdit.categroyTitle == null || categoryToEdit.categroyTitle == "")
    {
        <button @onclick="addNewCategory" disabled>שמירה וסיום</button>
        <span>לא ניתן לשמור קטגוריה ללא שם.</span>
    }
    else
    {
        <button @onclick="addNewCategory">שמירה וסיום</button>
    }

}
@code {

    [Parameter]
    public string popupTitle { get; set; }

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public CategoryToShow categoryToEdit { get; set; } = new CategoryToShow(); // Default initialization

    [Parameter]
    public string icon { get; set; }

    [Parameter]
    public string categoryColor { get; set; }

    [Parameter]
    public EventCallback<bool> isCategoryOverlayOpen { get; set; }

    [Parameter]
    public EventCallback<CategoryToShow> addNewCatToIndex { get; set; }

    [Parameter]
    public CategoryToAdd newCategory { get; set; }

    public CategoryToEdit editedCategory = new CategoryToEdit();


    bool disabledEditOfIncomeTitle = false;
    string ogCatName = "";

    protected override async Task OnInitializedAsync()
    {
        ogCatName = categoryToEdit.categroyTitle;
        if (ogCatName == "הכנסות")
        {
            disabledEditOfIncomeTitle = true;
        }
    }

    public async Task saveUpdatedCat()
    {
        editedCategory.categroyTitle = categoryToEdit.categroyTitle;
        editedCategory.color = categoryToEdit.color;
        editedCategory.icon = categoryToEdit.icon;
        editedCategory.id = categoryToEdit.id;

        var updateCatRes = await Http.PostAsJsonAsync("api/Present/EditCategory/", editedCategory);
        if (updateCatRes.IsSuccessStatusCode)
        {
            CategoryToEdit updatedCategory = await updateCatRes.Content.ReadFromJsonAsync<CategoryToEdit>();
            categoryToEdit.categroyTitle = updatedCategory.categroyTitle;
            categoryToEdit.icon = updatedCategory.icon;
            categoryToEdit.color = updatedCategory.color;
            isCategoryOverlayOpen.InvokeAsync(false);

            //need to refresh the home page

            Console.WriteLine("category updated");

        }
        else
        {
            Console.WriteLine("failed to update category");
        }
    }

    public async Task addNewCategory()
    {
        newCategory.categroyTitle = categoryToEdit.categroyTitle;
        newCategory.color = categoryToEdit.color;
        newCategory.icon = categoryToEdit.icon;
        newCategory.userID = userID;

        var CatToAddRes = await Http.PostAsJsonAsync("api/Present/AddCategory/" + userID, newCategory);
        if (CatToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            CategoryToShow newCat = await CatToAddRes.Content.ReadFromJsonAsync<CategoryToShow>();

            Console.WriteLine("New category added, ID: " + newCat.id);
            addNewCatToIndex.InvokeAsync(newCat);
            isCategoryOverlayOpen.InvokeAsync(false);
            newCategory = new CategoryToAdd();
        }
        else
        {
            // Consider reading the content of the response even if the status code is not successful.
            var errorContent = await CatToAddRes.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to add new category. Error: " + errorContent);
        }
    }

    //private ElementReference textInput;

    //private async Task FocusInput()
    //{
    //    await JS.InvokeVoidAsync("focusInput", textInput);
    //}


}
