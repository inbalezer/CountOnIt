@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toEdit
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http

<div class="megaOuterLay">
    <div class="outerLay">
        <div class="BgOverlay"> </div>
        <div class="overlay">

            <div class="paddingDiv">
                <div class="outerTitleAndIcon">
                    <button class="closeOverlay" @onclick="openCategoryOverlay"><img src="../css/images/close x.svg" /></button>
                    <h3 class="popupTitle">@popupTitle</h3>
                    <div class="titleAndIcon">
                        <input class="catTitle" type="text" @bind="categoryToEdit.categroyTitle" placeholder="שם הקטגוריה" />

                        <div class="keyBoardAndBtn">
                            <div class="outerCancleAndEmoji">
                                @if (isEmojiExsist)
                                {
                                    <button @onclick="ToggleKeyboard" id="emoji-trigger" class="hideDefaultEmojiBtn"><img src="../css/images/add emoji (1).svg" /></button>
                                }
                                else if (isCancleBtnClicked)
                                {
                                    <button @onclick="ToggleKeyboard" id="emoji-trigger"><img src="../css/images/add emoji (1).svg" /></button>
                                }
                                else
                                {
                                    <button @onclick="ToggleKeyboard" id="emoji-trigger" class="@hideBtn"><img src="../css/images/add emoji (1).svg" /></button>
                                }
                                @if (noEmojiBtn || isEmojiExsist)
                                {
                                    
                                    <div class="outerCancleAndEmoji">
                                        <button @onclick="deleteSelectedEmoji" class="cancleEmoji">ביטול בחירה</button>
                                        <button @onclick="ToggleKeyboard" class="selectedEmoji">
                                            <span class="emoji">@categoryToEdit.icon</span>
                                            <img src="../css/images/+ icon.svg" class="plusIcon" />
                                        </button>
                                    </div>
                                 
                                }
                            </div>


                            <div class="emoji-keyboard @visibilityClass">
                                <div class="emoji-categories">
                                    @foreach (var category in emojiCategories.Keys)
                                    {
                                        <button class="category-button @(selectedCategory == category ? "active" : "")"
                                            @onclick="() => SelectCategory(category)">
                                            @category
                                        </button>
                                    }
                                </div>
                                <div class="emoji-section">
                                    @foreach (var emoji in emojiCategories[selectedCategory])
                                    {
                                        <span @onclick="() => SelectEmoji(emoji)" class="emoji">@emoji</span>
                                    }
                                </div>
                            </div>

                        </div>
                        @*<input type="text" id="emoji-input" @bind="categoryToEdit.icon">*@
                    </div>
                </div>
                @* <span>@categoryToEdit.icon</span>*@

                <div class="outerColorsAndBtn">
                    <div class="outerColors">
                        <div class="colorsContainer">
                            <div class="colorsRow">
                                @foreach (var color in new[] { "#F4B367", "#7B67F4", "#F467AB", "#F47867", "#678EF4", "#85E7A0" })
                                {
                                    <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                        <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                           @onclick="() => UpdateColor(color)" />

                                    </div>
                                }
                            </div>
                            <div class="colorsRow">
                                @foreach (var color in new[] { "#67CAF4", "#FFEF9D", "#FBEBD7", "#04905E", "#F95050", "#DADADA" })
                                {
                                    <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                        <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                           @onclick="() => UpdateColor(color)" />

                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="divBtn">
                        @if (popupTitle == "עריכת קטגוריה")
                        {
                            hideBtn = "hideDefaultEmojiBtn";
                            <button class="saveBtn" @onclick="saveUpdatedCat">שמירה וסיום</button>
                        }
                        else if (popupTitle == "הוספת קטגוריה")
                        {
                            <button class="saveBtn" @onclick="addNewCategory">שמירה וסיום</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string popupTitle { get; set; }

    [Parameter]
    public int userID { get; set; }

    //[Parameter]
    //public CategoryToShow categoryToEdit { get; set; }
    [Parameter]
    public CategoryToShow categoryToEdit { get; set; } = new CategoryToShow(); // Default initialization

    [Parameter]
    public string icon { get; set; }

    [Parameter]
    public string categoryColor { get; set; }

    [Parameter]
    public bool isEmojiExsist { get; set; }

    [Parameter]
    public EventCallback<bool> isCategoryOverlayOpen { get; set; }

    [Parameter]
    public EventCallback<CategoryToShow> addNewCatToIndex { get; set; }

    [Parameter]
    public EventCallback<bool> closeOverlay { get; set; }

    [Parameter]
    public CategoryToAdd newCategory { get; set; }

    public CategoryToEdit editedCategory = new CategoryToEdit();

    //[Inject] IJSRuntime JS { get; set; }

    string color1Selected = "#F4B367";
    string selectedClass = "";
    string hideBtn = "";
    bool noEmojiBtn = false;
    bool isCancleBtnClicked = false;
    public async Task saveUpdatedCat()
    {
        editedCategory.categroyTitle = categoryToEdit.categroyTitle;
        editedCategory.color = categoryToEdit.color;
        editedCategory.icon = categoryToEdit.icon;
        editedCategory.id = categoryToEdit.id;

        var updateCatRes = await Http.PostAsJsonAsync("api/Present/EditCategory/", editedCategory);
        if (updateCatRes.IsSuccessStatusCode)
        {
            CategoryToEdit updatedCategory = await updateCatRes.Content.ReadFromJsonAsync<CategoryToEdit>();
            categoryToEdit.categroyTitle = updatedCategory.categroyTitle;
            if (categoryToEdit.icon == null || categoryToEdit.icon == "")
            {
                categoryToEdit.icon = "💰";
            }
            else
            {
                categoryToEdit.icon = updatedCategory.icon;
            }
            
            categoryToEdit.color = updatedCategory.color;
            isCategoryOverlayOpen.InvokeAsync(false);
            closeOverlay.InvokeAsync(true);

            //need to refresh the home page

            Console.WriteLine("category updated");

        }
        else
        {
            Console.WriteLine("failed to update category");
        }
    }

    public async Task addNewCategory()
    {
        newCategory.categroyTitle = categoryToEdit.categroyTitle;
        newCategory.color = categoryToEdit.color;
        newCategory.icon = categoryToEdit.icon;
        newCategory.userID = userID;

        var CatToAddRes = await Http.PostAsJsonAsync("api/Present/AddCategory/" + userID, newCategory);
        if (CatToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            CategoryToShow newCat = await CatToAddRes.Content.ReadFromJsonAsync<CategoryToShow>();

            Console.WriteLine("New category added, ID: " + newCat.id);
            addNewCatToIndex.InvokeAsync(newCat);
            isCategoryOverlayOpen.InvokeAsync(false);
            newCategory = new CategoryToAdd();
        }
        else
        {
            // Consider reading the content of the response even if the status code is not successful.
            var errorContent = await CatToAddRes.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to add new category. Error: " + errorContent);
        }
    }

    public void openCategoryOverlay()
    {

        closeOverlay.InvokeAsync(true);

    }

    //private ElementReference textInput;

    //private async Task FocusInput()
    //{
    //    await JS.InvokeVoidAsync("focusInput", textInput);
    //}

    //private void UpdateColor(string color)
    //{
    //    categoryToEdit.color = color;
    //    selectedClass = "selectedColor";

    //}

    private void UpdateColor(string color)
    {
        if (selectedClass == color)
        {
            // If the color is already selected, unselect it
            selectedClass = ""; // Reset the selected color
            categoryToEdit.color = ""; // Assuming you want to clear the selected color
        }
        else
        {
            // Otherwise, update to the new selected color
            categoryToEdit.color = color;
            selectedClass = color;
        }
    }



    private bool isVisible = false;
    private string selectedCategory = "כללי";
    private Dictionary<string, List<string>> emojiCategories = new Dictionary<string, List<string>>
    {
        {"כללי", new List<string> {
                "🏠", "🛏️", "🚿", "💡", "📞", "🖥️", "🚗", "🚌", "🛒", "🍲",
                "🏥", "💊", "👕", "🧹", "🧺", "🍼", "🐶", "🧑‍🔧", "📚", "🧾",
                "🕶️", "🌂", "🔑", "📦"
            }},
        {"כיף", new List<string> {
                "🎭", "🎟️", "🎮", "🎨", "📸", "🍽️", "🏋️‍♂️", "🧘", "🎸", "✈️",
                "🏕️", "🛍️", "🍷", "🎁", "🎈", "📖", "🍰", "🌐", "🕹️", "🚤",
                "🚵", "🛀", "🎷", "🎙️"
            }},
        {"פיננסי", new List<string> {
             "💳",
        "🏦", "💰", "🪙", "💸", "💹",
        "📈", "📉", "📊", "💲", "🏧",
        "🧾", "💱", "💲", "💹", "🏦",
        "🖋️", "💎", "📜", "🏧",
        "📅", "🖥️", "🖨️", "🔍"
            }}
    };

    private string visibilityClass => isVisible ? "visible" : "";

    private void ToggleKeyboard()
    {
        isVisible = !isVisible;
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private void SelectEmoji(string emoji)
    {
        //Console.WriteLine($"Emoji selected: {emoji}"); // Replace this with actual logic
        noEmojiBtn = true;
        isEmojiExsist = true;
        isCancleBtnClicked = false;
        hideBtn = "hideDefaultEmojiBtn";
        categoryToEdit.icon = emoji;
    }

    private void deleteSelectedEmoji()
    {
        isCancleBtnClicked = true;
        noEmojiBtn = false;
        isEmojiExsist = false;
        categoryToEdit.icon = "";
        hideBtn = "";
    }
}
