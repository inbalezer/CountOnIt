@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http


@if (deleteBtnClicked)
{
    <GeneralPopUpComponent popupTypeTitle="מחיקת קטגוריה" middleText="@popupBodyText" name="@Category.categroyTitle" action="מחיקה" makeAction=@deleteCategory closePopUp="closeDeletePopUp"></GeneralPopUpComponent>
}
<div>
    <div class="outerEdit">
        @if (editBtnClicked)
        {

            popupTitle = "עריכת קטגוריה";
            <EditCategoryComponent categoryToEdit="@Category" isCategoryOverlayOpen="showEditCategory" popupTitle="@popupTitle" closeOverlay="closeEditOverlay" isEmojiExsist=true></EditCategoryComponent>
        }
    </div>
   

    <div class="categoryWrap">
        <div id="iconAndCatTitle">
            <span class="emoji-circle">@Category.icon</span>
            <h2 class="CatTitle">@Category.categroyTitle</h2>
        </div>

        @foreach (SubCategoryToShow overDraftsubcategory in subCategories)
        {

            if (overDraftsubcategory.transactionsValue > overDraftsubcategory.monthlyPlannedBudget)
            {
                <span>חריגה⚠️</span>
                break;
            }
        }

        <div class="closedAndOpenMenu">
        <button class="options" @onclick="OpetionsBtnClicked"><img src="../css/images/option menu.svg" /></button>
        @if (isOpetionsBtnClicked)
        {
                <OptionsMenuComponent editBtnClicked="@showEditCategory" deleteBtnClicked="@deleteCategoryBtnClciked" closeOverlay="closeDeleteOverlay"></OptionsMenuComponent>
        }
        </div>

    </div>
    <div class="accordionAndSubCatsWrap">


        <div class="categoryAccordion">
            <button class="options" @onclick="accordionControl">
                <svg width="33" height="12" viewBox="0 0 33 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.75 2L16.75 10L30.75 2" stroke="white" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </button>
        </div>

        @if (isAccordionClick)
        {
            <div class="subCatsWrap">

                <button class="custom-btn" @onclick="getUserCategories">
                    <div class="btn-content">
                        <div class="textAndLine">
                            <span class="btn-text">תת קטגוריה חדשה</span>
                            <div class="subCatLine">
                            </div>
                        </div>
                        <div class="btn-icon"><img src="../css/images/+.svg" /></div>
                    </div>
                </button>

                @if (subCategories.Count > 0)
                {
                    bool isFirstItem = true;
                    @foreach (SubCategoryToShow subcategory in subCategories)
                    {
                        if (givingSubCat != null && subcategory.id == givingSubCat.id)
                        {
                            subcategory.monthlyPlannedBudget = givingSubCat.monthlyPlannedBudget;
                        }
                        if (subcategory.transactionsValue == null)
                        {
                            subcategory.transactionsValue = 0;
                        }
                        if (subcategory.monthlyPlannedBudget == null)
                        {
                            subcategory.monthlyPlannedBudget = 0;
                        }
                        <div>
                            <div class="budget-card @(isFirstItem ? "first" : "")">
                                <SubCategoryComponent subCategoryTitle="@subcategory.subCategoryTitle" totalSpendings="@subcategory.transactionsValue" budget="@subcategory.monthlyPlannedBudget" subCategoryIDToGet="@subcategory.id" userID="@userID" subCatTakenBudget="updateTakenSubCatBudget" refreshSubCats="getSubCategories" updateEditedSubCat="updateEditedSubCat" categoryID="@Category.id" subCatDeleted="deleteSubCat" categoryTitle="@Category.categroyTitle" categoryTypeIndicator="@categoryTypeIndicator"></SubCategoryComponent>
                            </div>
                        </div>
                        
                        isFirstItem = false;
                    }


                }
            </div>
        }

    </div>





    @if (isSubCategoryAddOverlayOpen)
    {
        <div>
            <div>
                <h2>הוספת תת קטגוריה</h2>
                <button class="modal-close-btn" @onclick="() => isSubCategoryAddOverlayOpen = !isSubCategoryAddOverlayOpen">&times;</button>
            </div>


            @if (userCategories.Count > 0)
            {
                <span>הוספת תת קטגוריה ל</span>
                <select @bind="selectedCategoryForNewSubCat">

                    @foreach (AllUserCategories userCategory in userCategories)
                    {

                        <option value=@userCategory.categroyTitle> @userCategory.categroyTitle</option>


                    }
                </select>
            }

            <div>
                <label for="amount">שם תת קטגוריה</label>
                <input type="text" id="amount" placeholder="שם תת הקטגוריה" @bind="newSubCategory.subCategoryTitle" />
            </div>

            <div>
                <label for="description">מה התקציב החודשי שלך עבור @newSubCategory.subCategoryTitle? </label>
                <input type="number" id="description" placeholder="0" @bind="newSubCategory.monthlyPlannedBudget" />
            </div>
            <div>
                <label for="importance">עדיפות תת הקטגוריה</label>
                <span>@newSubCategory.importance</span>
                <input type="radio"
                   name="importance" @onchange="@(() => newSubCategory.importance = 0)" />
                <label>רצון</label>

                <input type="radio" @onchange="@(() => newSubCategory.importance = 1)"
                   name="importance" />
                <label>צורך</label>

                <input type="radio" @onchange="@(() => newSubCategory.importance = 2)"
                   name="importance" />
                <label>חובה</label>
            </div>
            <div>
                <p>לדוגמה: לק - רצון, דלק - צורך, חובה - שכ״ד. העדיפות משפיעה על הטיפים שתקבל לייעול התקציב שלך.</p>
            </div>
            <br />
            <button class="submit-btn" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הזנה</button>
            <button class="submit-btn" @onclick="addSubCategoryAndEnd">שמירה וסיום</button>
        </div>
    }
    @if (openTransactionOverlay)
    {
        <AddTransactionComponent subCategoryTitle="@newSubCatTitle" subCategoryIDTOGet="@newSubCatID" isTransactionOverlayOpen="AddTransOverlay" userID="@userID"></AddTransactionComponent>
    }
</div>

@if (searchedSubCats != null && searchedSubCats.Count > 0)
{
    isAccordionClick = true;
    getSearchedSubCat();
}

@code {

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public string categoryTitle { get; set; }

    [Parameter]
    public string icon { get; set; }

    [Parameter]
    public string categoryColor { get; set; }

    [Parameter]
    public bool doRefresh { get; set; }

    [Parameter]
    public bool delete { get; set; }


    [Parameter]
    public bool subCatRefreshed { get; set; }

    [Parameter]
    public CategoryToShow Category { get; set; }



    [Parameter]

    public EventCallback isEditClicked { get; set; }

    [Parameter]

    public EventCallback isDeleteClicked { get; set; }
    [Parameter]

    public EventCallback<CategoryToShow> deleteCat { get; set; }

    [Parameter]
    public EventCallback<OverDraftBudgetToEdit> givingSubCatBudget { get; set; }

    [Parameter]
    public EventCallback<bool> isSubCatSearched { get; set; }

    [Parameter]
    public EventCallback<bool> closeOverlay { get; set; }

    [Parameter]
    public EventCallback<bool> closeEdit { get; set; }

    [Parameter]
    public EventCallback<bool> closeDelete { get; set; }

    [Parameter]
    public OverDraftBudgetToEdit givingSubCat { get; set; }

    [Parameter]
    public List<int> searchedSubCats { get; set; }

    [Parameter]
    public bool categoryTypeIndicator { get; set; } //will indicate if this is an expense or income category

    public bool isAccordionClick = false;

    string selectedCategoryForNewSubCat = "";
    string newSubCatTitle = "";
    string msg = "";
    string popupTitle = "מחיקת קטגוריה";
    string popupBodyText = "אתה עומד למחוק את קטגוריית ";


    int newSubCatID = 0;
    //public bool isAccordionClick = false;
    public bool isSubCategoryAddOverlayOpen = false;
    public bool editBtnClicked = false;
    public bool deleteBtnClicked = false;
    bool openTransactionOverlay = false;
    bool isOpetionsBtnClicked = false;


    List<SubCategoryToShow> subCategories = new List<SubCategoryToShow>();
    List<AllUserCategories> userCategories = new List<AllUserCategories>();

    SubCategoryToAdd newSubCategory = new SubCategoryToAdd();
    SubCategoryToShow newSubCatToShow = new SubCategoryToShow();
    AllUserCategories userCategory = new AllUserCategories();

    public async Task accordionControl()
    {
        isAccordionClick = !isAccordionClick;
        if (isAccordionClick)
        {
            await getSubCategories();
        }
    }

    public async Task getSubCategories()
    {
        isAccordionClick = true;
        if (!categoryTypeIndicator)
        {

            var subCatRes = await Http.GetAsync("api/Present/subCategoryToShow/" + Category.id);
            if (subCatRes.IsSuccessStatusCode)
            {
                subCategories = new List<SubCategoryToShow>();
                subCategories = subCatRes.Content.ReadFromJsonAsync<List<SubCategoryToShow>>().Result;
                subCatRefreshed = false;
            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }
        else
        {
            var getIncomeSubCats = await Http.GetAsync("api/Present/getIncomeSubCats/" + Category.id);

            if (getIncomeSubCats.IsSuccessStatusCode)
            {
                subCategories = new List<SubCategoryToShow>();
                subCategories = getIncomeSubCats.Content.ReadFromJsonAsync<List<SubCategoryToShow>>().Result;
            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }
    }

    public async Task getUserCategories()
    {
        isSubCategoryAddOverlayOpen = true;
        selectedCategoryForNewSubCat = Category.categroyTitle;


        var getAllUserCategories = await Http.GetAsync("api/Present/GetUserCategories/" + userID);
        if (getAllUserCategories.IsSuccessStatusCode)
        {
            userCategories = getAllUserCategories.Content.ReadFromJsonAsync<List<AllUserCategories>>().Result;
        }
        else
        {
            Console.WriteLine("no Categories found");
        }
    }

    public async Task addSubCategoryAndEnd()
    {
        foreach (AllUserCategories userCategory in userCategories)
        {
            if (userCategory.categroyTitle == selectedCategoryForNewSubCat)
            {
                newSubCategory.categoryID = userCategory.id;

            }
        }

        var subCatToAddRes = await Http.PostAsJsonAsync("api/Present/AddSubCategory", newSubCategory);
        if (subCatToAddRes.IsSuccessStatusCode)
        {
            SubCategoryToAdd tempSubCat = await subCatToAddRes.Content.ReadFromJsonAsync<SubCategoryToAdd>();
            newSubCatID = tempSubCat.id;
            newSubCatTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.id = tempSubCat.id;
            newSubCatToShow.subCategoryTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.monthlyPlannedBudget = tempSubCat.monthlyPlannedBudget;
            newSubCatToShow.transactionsValue = 0;
            subCategories.Add(newSubCatToShow);
            newSubCatToShow = new SubCategoryToShow();
            // להפעיל מחדש פונקציה שמושכת את האלמנטים בדף הבית
            Console.WriteLine("new sub category added");

            newSubCategory = new SubCategoryToAdd();
            isSubCategoryAddOverlayOpen = false;
        }
        else
        {
            Console.WriteLine("failed to add new sub category");
        }
    }


    public async Task addSubCategoryAndTransaction()
    {
        newSubCatTitle = "";
        newSubCatID = 0;
        foreach (AllUserCategories userCategory in userCategories)
        {
            if (userCategory.categroyTitle == selectedCategoryForNewSubCat)
            {
                newSubCategory.categoryID = userCategory.id;
            }
        }

        var subCatToAddRes1 = await Http.PostAsJsonAsync("api/Present/AddSubCategory", newSubCategory);
        if (subCatToAddRes1.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            SubCategoryToAdd tempSubCat = await subCatToAddRes1.Content.ReadFromJsonAsync<SubCategoryToAdd>();
            newSubCatID = tempSubCat.id;
            newSubCatTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.id = tempSubCat.id;
            newSubCatToShow.subCategoryTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.monthlyPlannedBudget = tempSubCat.monthlyPlannedBudget;
            newSubCatToShow.transactionsValue = 0;
            subCategories.Add(newSubCatToShow);
            newSubCatToShow = new SubCategoryToShow();


            Console.WriteLine("New sub-category added, ID: " + newSubCatID);

            // Reset the newSubCategory object for a new entry.
            newSubCategory = new SubCategoryToAdd();

            // Close the sub-category add overlay and open the transaction overlay.
            isSubCategoryAddOverlayOpen = false;
            openTransactionOverlay = true;

            // If there's a method to refresh the UI or update elements on the homepage, call it here.
            // await RefreshHomeElementsAsync();
        }
        else
        {
            // Consider reading the content of the response even if the status code is not successful.
            var errorContent = await subCatToAddRes1.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to add new sub-category. Error: " + errorContent);
        }
    }


    public void AddTransOverlay()
    {
        openTransactionOverlay = !openTransactionOverlay;
        isSubCategoryAddOverlayOpen = false;
    }

    public void generateRefresh(bool refresh)
    {
        doRefresh = refresh;
    }

    //get category to edit:
    public void showEditCategory()
    {
        editBtnClicked = !editBtnClicked;
        deleteBtnClicked = false;
        isOpetionsBtnClicked = false;
        closeOverlay.InvokeAsync(true);
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    public void deleteCategoryBtnClciked()
    {
        deleteBtnClicked = !deleteBtnClicked;
        editBtnClicked = false;
        isOpetionsBtnClicked = false;

    }

    protected async Task deleteCategory()
    {
        var deleteRes = await Http.DeleteAsync("api/Present/deleteCategory/" + Category.id);
        if (deleteRes.IsSuccessStatusCode)
        {
            deleteCat.InvokeAsync(Category);
        }
        else
        {
            Console.WriteLine(" בעיה במחיקת קטגוריה");
        }
    }

    public async void updateTakenSubCatBudget(List<OverDraftBudgetToEdit> subNewBudget)
    {
        foreach (OverDraftBudgetToEdit budgetToUpdate in subNewBudget)
        {
            foreach (SubCategoryToShow subCatToUpdate in subCategories)
            {
                if (subCatToUpdate.id == budgetToUpdate.id)
                {
                    subCatToUpdate.monthlyPlannedBudget = budgetToUpdate.monthlyPlannedBudget;
                }
            }
        }

        await getSubCategories();
        var updatedGivingSubCatBudget = await Http.GetAsync("api/Transactions/updateGivingSubCat/" + subNewBudget[0].id);
        if (updatedGivingSubCatBudget.IsSuccessStatusCode)
        {
            double newBudget = await updatedGivingSubCatBudget.Content.ReadFromJsonAsync<double>();
            OverDraftBudgetToEdit givingSubCat = new OverDraftBudgetToEdit();
            givingSubCat.id = subNewBudget[0].id;
            givingSubCat.monthlyPlannedBudget = newBudget;
            givingSubCatBudget.InvokeAsync(givingSubCat);
        }

    }

    public void updateEditedSubCat(SubCategoryToEdit editedSubCat)
    {
        foreach (SubCategoryToShow subcategory in subCategories)
        {
            if (editedSubCat.categoryID != Category.id)
            {
                subCategories.Remove(subcategory);
            }
            else if (editedSubCat.id == subcategory.id)
            {
                subcategory.subCategoryTitle = editedSubCat.subCategoryTitle;
                subcategory.monthlyPlannedBudget = editedSubCat.monthlyPlannedBudget;
            }
        }
    }

    public void deleteSubCat(int subCatIDtoRemove)
    {
        foreach (SubCategoryToShow subCat in subCategories)
        {
            if (subCat.id == subCatIDtoRemove)
            {
                subCategories.Remove(subCat);
            }
        }
    }

    public void closeDeletePopUp()
    {
        deleteBtnClicked = !deleteBtnClicked;
    }

    public async Task getSearchedSubCat()
    {
        subCategories = new List<SubCategoryToShow>();
        foreach (int sb in searchedSubCats)
        {
            var subCatRes = await Http.GetAsync("api/Present/GetSubCategory/" + sb);
            if (subCatRes.IsSuccessStatusCode)
            {
                SubCategoryToShow selectedSubCat = await subCatRes.Content.ReadFromJsonAsync<SubCategoryToShow>();


                subCategories.Add(selectedSubCat);

            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }

        makeSearchfuncAgain();
        isAccordionClick = true;
        subCatRefreshed = false;

    }

    void makeSearchfuncAgain()
    {
        isSubCatSearched.InvokeAsync(true);

    }

    void closeEditOverlay()
    {
        editBtnClicked = false;
        closeEdit.InvokeAsync(true);
    }

    void closeDeleteOverlay()
    {
        closeOverlay.InvokeAsync(true);
    }

    

}