@using CountOnIt.Shared.Models.present.toShow
@using CountOnIt.Shared.Models.present.toAdd
@using CountOnIt.Shared.Models.present.toEdit
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http


@if (deleteBtnClicked)
{
    isOpetionsBtnClicked = false;
    <GeneralPopUpComponent popupTypeTitle="מחיקת קטגוריה" middleText="@popupBodyText" name="@Category.categroyTitle" action="מחיקה" makeAction=@deleteCategory closePopUp="closeDeletePopUp"></GeneralPopUpComponent>
}
<div>
    <div class="outerEdit">
        @if (editBtnClicked)
        {

            popupTitle = "עריכת קטגוריה";
            isOpetionsBtnClicked = false;
            <EditCategoryComponent categoryToEdit="@Category" isCategoryOverlayOpen="showEditCategory" popupTitle="@popupTitle" closeOverlay="closeEditOverlay" isEmojiExsist=true></EditCategoryComponent>
        }
    </div>


    <div class="categoryWrap">
        <div id="iconAndCatTitle">
            <span class="emoji-circle">@Category.icon</span>
            <h2 class="CatTitle">@Category.categroyTitle</h2>
        </div>

        @foreach (SubCategoryToShow overDraftsubcategory in subCategories)
        {

            if (overDraftsubcategory.transactionsValue > overDraftsubcategory.monthlyPlannedBudget)
            {
                <button class="overdraftBtn" @onclick="@(()=>checkOverdraft(overDraftsubcategory.id))">
                    <span>חריגה</span>
                    <img src="../css/images/overdtaft.svg" />
                </button>
                break;
            }
        }

        <div class="closedAndOpenMenu">
            <button class="options" @onclick="OpetionsBtnClicked"><img src="../css/images/option menu.svg" /></button>
            @if (isOpetionsBtnClicked)
            {

                <OptionsMenuComponent editBtnClicked="@showEditCategory" deleteBtnClicked="@deleteCategoryBtnClciked" closeOverlay="closeDeleteOverlay"></OptionsMenuComponent>
            }
        </div>

    </div>
    <div class="accordionAndSubCatsWrap">


        <div class="categoryAccordion" style="background: @categoryColor">
            <button class="options" @onclick="accordionControl">
                <svg width="33" height="12" viewBox="0 0 33 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.75 2L16.75 10L30.75 2" stroke="white" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </button>
        </div>

        @if (isAccordionClick)
        {
            <div class="subCatsWrap">
                @if (subCategories.Count < 13)
                {
                    <button class="custom-btn" @onclick="getUserCategories">
                        <div class="btn-content">
                            <div class="textAndLine">
                                <span class="btn-text">תת קטגוריה חדשה</span>
                                <div class="subCatLine">
                                </div>
                            </div>
                            <div class="outerPlusBtn">
                                <div class="btn-icon"><img src="../css/images/+.svg" /></div>
                            </div>
                        </div>
                    </button>
                }
                else
                {
                    @*     לשנות את טקסט הכפתור אחרי שנוסיף עיצוב dis*@
                    <button class="custom-btn" @onclick="getUserCategories" disabled>
                        <div class="btn-content">
                            <div class="textAndLine">
                                <span class="btn-text">תת קטגוריה חדשה dis</span>
                                <div class="subCatLine">
                                </div>
                            </div>
                            <div class="outerPlusBtn">
                                <div class="btn-icon"><img src="../css/images/+.svg" /></div>
                            </div>
                        </div>
                    </button>
                }


                @if (subCategories.Count > 0)
                {
                    bool isFirstItem = true;
                    @foreach (SubCategoryToShow subcategory in subCategories)
                    {
                        if (givingSubCat != null && subcategory.id == givingSubCat.id)
                        {
                            subcategory.monthlyPlannedBudget = givingSubCat.monthlyPlannedBudget;
                        }
                        if (subcategory.transactionsValue == null)
                        {
                            subcategory.transactionsValue = 0;
                        }
                        if (subcategory.monthlyPlannedBudget == null)
                        {
                            subcategory.monthlyPlannedBudget = 0;
                        }
                        <div>
                            @if (subcategory.id == overDraftSubCategory.id)
                            {
                                <div class="budget-card @(isFirstItem ? "first" : "")">
                                    <SubCategoryComponent subCategoryTitle="@subcategory.subCategoryTitle" totalSpendings="@subcategory.transactionsValue" budget="@subcategory.monthlyPlannedBudget" subCategoryIDToGet="@subcategory.id" userID="@userID" subCatTakenBudget="updateTakenSubCatBudget" refreshSubCats="getSubCategories" updateEditedSubCat="updateEditedSubCat" categoryID="@Category.id" subCatDeleted="deleteSubCat" categoryTitle="@Category.categroyTitle" categoryTypeIndicator="@categoryTypeIndicator" updatedStreakStat="updateStreak" subCatColor="@categoryColor" overdraftNotTreated="@overdraftNotTreated" openOverdraftOverlay="@(()=> checkOverdraft(subcategory.id))" updateTransactionSum="updateTransSumInStatTable"></SubCategoryComponent>
                                </div>
                            }
                            else
                            {
                                <div class="budget-card @(isFirstItem ? "first" : "")">
                                    <SubCategoryComponent subCategoryTitle="@subcategory.subCategoryTitle" totalSpendings="@subcategory.transactionsValue" budget="@subcategory.monthlyPlannedBudget" subCategoryIDToGet="@subcategory.id" userID="@userID" subCatTakenBudget="updateTakenSubCatBudget" refreshSubCats="getSubCategories" updateEditedSubCat="updateEditedSubCat" categoryID="@Category.id" subCatDeleted="deleteSubCat" categoryTitle="@Category.categroyTitle" categoryTypeIndicator="@categoryTypeIndicator" updatedStreakStat="updateStreak" subCatColor="@categoryColor" openOverdraftOverlay="@(()=> checkOverdraft(subcategory.id))" updateTransactionSum="updateTransSumInStatTable"></SubCategoryComponent>
                                </div>
                            }

                        </div>

                        isFirstItem = false;
                    }


                }
            </div>
        }

    </div>





    @if (isSubCategoryAddOverlayOpen)
    {
        <div class="overlay">
            <div class="outerSubCatOverlay">
                <div class="innerSubCatOverlay">
                    <button class="modal-close-btn" @onclick="() => isSubCategoryAddOverlayOpen = !isSubCategoryAddOverlayOpen"><img src="../css/images/close x.svg" /></button>
                    <h2>הוספת תת קטגוריה</h2>

                    <div class="editAndAddSubCat">
                        @if (userCategories.Count > 0)
                        {
                            <span>הוספת תת קטגוריה ל</span>
                            <select class="catsDropDown" @bind="selectedCategoryForNewSubCat">

                                @foreach (AllUserCategories userCategory in userCategories)
                                {

                                    <option class="catsOptions" value=@userCategory.categroyTitle> @userCategory.categroyTitle</option>


                                }
                            </select>
                        }
                    </div>

                    <div class="outerTitleAndCounter">
                        <div class="input-container">
                            <label class="titleName" for="amount">שם תת קטגוריה</label>
                            <input class="titleBox" type="text" id="amount" placeholder="שם תת הקטגוריה" maxlength="18" minlength="2" @bind="titleInput" @oninput="SubCatTitleLengthCounter" />
                            <div class="counter">
                                <div class="outerTitleName">

                                    @if (titleInputLength > 0)
                                    {

                                        <span>@titleInput.Length/18</span>
                                    }
                                    else
                                    {
                                        <span>0/18</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>








                    <label class="titleName" for="description">מה התקציב החודשי שלך עבור @newSubCategory.subCategoryTitle? </label>

                    <div class="outerBudget">
                        <input class="budgetBox" type="number" id="description" placeholder="0" @bind="newSubCategory.monthlyPlannedBudget" />
                        <span class="currency-symbol">₪</span>
                        <div class="lineBetween"></div>
                    </div>

                    <div class="outerImportance">
                        <label class="titleName" for="importance">עדיפות תת הקטגוריה</label>
                        <div class="outerBtns">
                            <div class="importanceBtns">
                                <input type="radio" id="wants" name="importance" @onchange="@(() => newSubCategory.importance = 0)" />
                                <label for="wants">רצון</label>
                                <span class="divider"></span>

                                <input type="radio" id="needs" name="importance" @onchange="@(() => newSubCategory.importance = 1)" />
                                <label for="needs">צורך</label>
                                <span class="divider"></span>

                                <input type="radio" id="must" name="importance" @onchange="@(() => newSubCategory.importance = 2)" />
                                <label for="must">חובה</label>
                            </div>
                        </div>
                    </div>

                    <div class="outerExample">
                        <div>
                            <span class="example">לדוגמה:</span>
                            לק - רוצה, דלק - צריך, שכ״ד- חייב. העדיפות משפיעה על הטיפים לייעול התקציב.
                        </div>
                    </div>
                    @if (titleInput.Length >= 2 && titleInput.Length < 19 && newSubCategory.monthlyPlannedBudget > 0 && newSubCategory.importance >= 0 && newSubCategory.importance < 3)
                    {

                        <div class="outerSaveBtns">
                            <button class="primery-button" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הזנה</button>
                            <button class="secondery-button" @onclick="addSubCategoryAndEnd">שמירה וסיום</button>
                        </div>
                    }
                    else
                    {
                        <div class="outerSaveBtns">
                            <button class="primery-button" disabled @onclick="addSubCategoryAndTransaction">שמירה ויצירת הזנה</button>
                            <button class="secondery-button" disabled @onclick="addSubCategoryAndEnd">שמירה וסיום</button>

                        </div>
                        if (titleInput.Length < 2 || titleInput.Length > 18)
                        {
                            <span>אורך שם תת הקטגוריה לא תקין.</span>
                        }
                        else if (newSubCategory.monthlyPlannedBudget < 0)
                        {
                            <span>תקציב תת קטגוריה צריך להיות גדול מאפס.</span>
                        }
                        else if (newSubCategory.importance < 0 || newSubCategory.importance > 2)
                        {
                            <span>בחרו עדיפות לתת קטגוריה זו.</span>

                        }
                    }
                </div>
            </div>
        </div>
    }

    @if (openTransactionOverlay)
    {
        <AddTransactionComponent subCategoryTitle="@newSubCatTitle" subCategoryIDTOGet="@newSubCatID" isTransactionOverlayOpen="AddTransOverlay" userID="@userID" updatedStreak="updateStreak"></AddTransactionComponent>
    }
</div>

@if (searchedSubCats != null && searchedSubCats.Count > 0)
{
    isAccordionClick = true;
    getSearchedSubCat();
}

@if (overdraftDetected)
{
    <div class="overlay">
        <div class="outerOverdraft">
            <div class="overdraftWindow">

                <div class="outerText">
                    <h3 class="titleText">חרגת...</h3>

                    <div>נראה שהוצאת ב @overDraftSubCategory.subCategoryTitle @closeOverdraftOpts[closeOverdraftOpts.Count-1].remainingBudget ₪ </div>
                    <div>שזה <span><b>@currentGap ₪</b></span> יותר </div>
                    <div>מהתקציב שהגדרת: @closeOverdraftOpts[closeOverdraftOpts.Count-1].monthlyPlannedBudget ₪ </div>
                    <div>כדאי להגדיל את התקציב.</div>
                    <div><b>הסכום שאני רוצה להעביר:</b></div>
                    <div class="outerCurrentGap">
                        <input class="currentGap" type="number" @bind="currentGap" min="@currentGap" />
                        <span class="currency-symbolOverDraft">₪</span>
                        <div class="lineBetweenOverdraft"></div>
                    </div>

                    <div>מאיזו תת קטגוריה יועבר הסכום?</div>
                </div>
                <div class="outerTranferTable">

                    <div class="outerFromSubCats">
                        <span style="font-weight:700;">העברה מ:</span>
                        <div class="outerDropAndOptions">
                            <div class="outerDropAndPoly" @onclick="()=>openSubCatsOptions =! openSubCatsOptions">
                                <div class="subCatsDrop">
                                    <span>@chosenSubCategory.subCategoryTitle</span>
                                    <span class="accordionPoly"><img style="width:7vw;" src="../css/images/arrow3.svg" /></span>
                                </div>

                            </div>
                            @if (openSubCatsOptions)
                            {
                                <div class="subCatsDropDown">
                                    @foreach (OverBudgetToShow subcategoryOpt in closeOverdraftOpts)
                                    {
                                        @if (subcategoryOpt.id != overDraftSubCategory.id)
                                        {
                                            <div @onclick="()=>HandleChange(subcategoryOpt)">
                                                @subcategoryOpt.subCategoryTitle
                                            </div>
                                        }
                                    }
                                </div>

                            }
                        </div>
                        <div class="outerBudgets">
                            <div class="outerBudgetTitle">
                                <div style="font-weight: 600;">תקציב:</div>
                                <div class="titleDivder"></div>
                            </div>
                            @if (string.IsNullOrEmpty(chosenSubCategory.subCategoryTitle))
                            {
                                <div>
                                    נוכחי: 0 <span>₪</span>

                                </div>
                                <div>
                                    עתידי: 0 <span>₪</span>
                                </div>
                            }
                            else
                            {
                                <div>
                                    נוכחי: @chosenSubCategory.monthlyPlannedBudget
                                    <span>₪</span>
                                </div>
                                <div>
                                    עתידי: @(
                                 chosenSubCategory.monthlyPlannedBudget - currentGap
                                 )
                                    <span>₪</span>
                                </div>
                            }
                        </div>

                    </div>
                    <div class="outerToSubCat">

                        <span style="font-weight:700;">העברה ל:</span>
                        <div class="outerDropAndOptions">
                            <div class="outerDropAndPoly">
                                <div class="subCatsDrop" style="justify-content: center;">
                                    @(
                                        overDraftSubCategory.subCategoryTitle = closeOverdraftOpts[closeOverdraftOpts.Count - 1].subCategoryTitle
                                        )

                                </div>

                            </div>
                        </div>

                        <div class="outerBudgets">
                            <div class="outerBudgetTitle">
                                <div style="font-weight: 600;">תקציב:</div>
                                <div class="titleDivder"></div>
                            </div>
                            @if (string.IsNullOrEmpty(chosenSubCategory.subCategoryTitle))
                            {
                                <div>
                                    נוכחי: @(
                                 closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget)
                                    <span>₪</span>
                                </div>
                                <div>
                                    עתידי: 0 <span>₪</span>
                                </div>
                            }
                            else
                            {
                                <div>
                                    נוכחי: @(
                                 closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget)
                                    <span>₪</span>
                                </div>
                                <div>
                                    עתידי: @(
                                 closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget + currentGap)
                                    <span>₪</span>
                                </div>

                            }
                        </div>

                    </div>

                </div>
                <div class="outerBtns">

                    @if (chosenSubCategory == null)
                    {
                        <button class="primery-buttonOverDraft" @onclick="manageBudgetsToTranfer" disabled>העברה</button>
                    }
                    else
                    {
                        <button class="primery-buttonOverDraft" @onclick="manageBudgetsToTranfer">העברה</button>
                    }
                    <button class="thirdBtn" @onclick="NotTreatedOverdraft">אטפל בהמשך</button>
                </div>

            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public string categoryTitle { get; set; }

    [Parameter]
    public string icon { get; set; }

    [Parameter]
    public string categoryColor { get; set; }



    [Parameter]
    public bool doRefresh { get; set; }

    [Parameter]
    public bool delete { get; set; }


    [Parameter]
    public bool subCatRefreshed { get; set; }

    [Parameter]
    public CategoryToShow Category { get; set; }



    [Parameter]

    public EventCallback isEditClicked { get; set; }

    [Parameter]
    public EventCallback isDeleteClicked { get; set; }

    [Parameter]

    public EventCallback<CategoryToShow> deleteCat { get; set; }

    [Parameter]
    public EventCallback<OverDraftBudgetToEdit> givingSubCatBudget { get; set; }

    [Parameter]
    public EventCallback<bool> isSubCatSearched { get; set; }

    [Parameter]
    public EventCallback<bool> closeOverlay { get; set; }

    [Parameter]
    public EventCallback<bool> closeEdit { get; set; }

    [Parameter]
    public EventCallback<bool> closeDelete { get; set; }

    [Parameter]
    public OverDraftBudgetToEdit givingSubCat { get; set; }

    [Parameter]
    public List<int> searchedSubCats { get; set; }

    [Parameter]
    public bool categoryTypeIndicator { get; set; } //will indicate if this is an expense or income category

    [Parameter]
    public EventCallback<string?> updatedStreakStat { get; set; }

    [Parameter]
    public EventCallback<double?> updateBudget { get; set; }

    [Parameter]
    public EventCallback<double> updateTransSum { get; set; } //updates transaction sums in main status table

    public bool isAccordionClick = false;

    string selectedCategoryForNewSubCat = "";
    string newSubCatTitle = "";
    string msg = "";
    string popupTitle = "מחיקת קטגוריה";
    string popupBodyText = "אתה עומד למחוק את קטגוריית ";


    int newSubCatID = 0;
    //public bool isAccordionClick = false;
    public bool isSubCategoryAddOverlayOpen = false;
    public bool editBtnClicked = false;
    public bool deleteBtnClicked = false;
    bool openTransactionOverlay = false;
    bool isOpetionsBtnClicked = false;


    List<SubCategoryToShow> subCategories = new List<SubCategoryToShow>();
    List<AllUserCategories> userCategories = new List<AllUserCategories>();

    SubCategoryToAdd newSubCategory = new SubCategoryToAdd();
    SubCategoryToShow newSubCatToShow = new SubCategoryToShow();
    AllUserCategories userCategory = new AllUserCategories();

    string titleInput = "";
    int titleInputLength = 0;

    bool overdraftDetected = false;
    bool overdraftOverlayOpen = false;
    bool overdraftNotTreated = false;
    bool openSubCatsOptions = false;
    OverBudgetToShow chosenSubCategory = new OverBudgetToShow();

    protected override void OnInitialized()
    {
        if (categoryColor == null || categoryColor == "")
        {
            categoryColor = "#678EF4"; //default color
        }
    }

    public async Task accordionControl()
    {
        isAccordionClick = !isAccordionClick;
        if (isAccordionClick)
        {
            await getSubCategories();
        }
    }


    public async Task getSubCategories()
    {
        isAccordionClick = true;
        if (!categoryTypeIndicator)
        {

            var subCatRes = await Http.GetAsync("api/Present/subCategoryToShow/" + Category.id);
            if (subCatRes.IsSuccessStatusCode)
            {
                subCategories = new List<SubCategoryToShow>();
                subCategories = subCatRes.Content.ReadFromJsonAsync<List<SubCategoryToShow>>().Result;
                subCatRefreshed = false;
            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }
        else
        {
            var getIncomeSubCats = await Http.GetAsync("api/Present/getIncomeSubCats/" + Category.id);

            if (getIncomeSubCats.IsSuccessStatusCode)
            {
                subCategories = new List<SubCategoryToShow>();
                subCategories = getIncomeSubCats.Content.ReadFromJsonAsync<List<SubCategoryToShow>>().Result;
            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }
    }

    public async Task getUserCategories()
    {
        isSubCategoryAddOverlayOpen = true;
        selectedCategoryForNewSubCat = Category.categroyTitle;


        var getAllUserCategories = await Http.GetAsync("api/Present/GetUserCategories/" + userID);
        if (getAllUserCategories.IsSuccessStatusCode)
        {
            userCategories = getAllUserCategories.Content.ReadFromJsonAsync<List<AllUserCategories>>().Result;
        }
        else
        {
            Console.WriteLine("no Categories found");
        }
    }

    public async Task addSubCategoryAndEnd()
    {
        foreach (AllUserCategories userCategory in userCategories)
        {
            if (userCategory.categroyTitle == selectedCategoryForNewSubCat)
            {
                newSubCategory.categoryID = userCategory.id;

            }
        }
        newSubCategory.subCategoryTitle = titleInput;

        var subCatToAddRes = await Http.PostAsJsonAsync("api/Present/AddSubCategory", newSubCategory);
        if (subCatToAddRes.IsSuccessStatusCode)
        {
            SubCategoryToAdd tempSubCat = await subCatToAddRes.Content.ReadFromJsonAsync<SubCategoryToAdd>();
            newSubCatID = tempSubCat.id;
            newSubCatTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.id = tempSubCat.id;
            newSubCatToShow.subCategoryTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.monthlyPlannedBudget = tempSubCat.monthlyPlannedBudget;
            newSubCatToShow.transactionsValue = 0;
            if (newSubCategory.categoryID == Category.id)
            {
                subCategories.Add(newSubCatToShow);
            }
            newSubCatToShow = new SubCategoryToShow();
            // להפעיל מחדש פונקציה שמושכת את האלמנטים בדף הבית
            Console.WriteLine("new sub category added");

            newSubCategory = new SubCategoryToAdd();
            titleInput = "";
            isSubCategoryAddOverlayOpen = false;
        }
        else
        {
            Console.WriteLine("failed to add new sub category");
        }
    }


    public async Task addSubCategoryAndTransaction()
    {
        newSubCatTitle = "";
        newSubCatID = 0;
        foreach (AllUserCategories userCategory in userCategories)
        {
            if (userCategory.categroyTitle == selectedCategoryForNewSubCat)
            {
                newSubCategory.categoryID = userCategory.id;
            }
        }
        newSubCategory.subCategoryTitle = titleInput;

        var subCatToAddRes1 = await Http.PostAsJsonAsync("api/Present/AddSubCategory", newSubCategory);
        if (subCatToAddRes1.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            SubCategoryToAdd tempSubCat = await subCatToAddRes1.Content.ReadFromJsonAsync<SubCategoryToAdd>();
            newSubCatID = tempSubCat.id;
            newSubCatTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.id = tempSubCat.id;
            newSubCatToShow.subCategoryTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.monthlyPlannedBudget = tempSubCat.monthlyPlannedBudget;
            newSubCatToShow.transactionsValue = 0;
            //subCategories.Add(newSubCatToShow);
            if (tempSubCat.categoryID == Category.id)
            {
                subCategories.Add(newSubCatToShow);
            }
            newSubCatToShow = new SubCategoryToShow();


            Console.WriteLine("New sub-category added, ID: " + newSubCatID);

            // Reset the newSubCategory object for a new entry.
            titleInput = "";
            newSubCategory = new SubCategoryToAdd();

            // Close the sub-category add overlay and open the transaction overlay.
            isSubCategoryAddOverlayOpen = false;
            openTransactionOverlay = true;

            // If there's a method to refresh the UI or update elements on the homepage, call it here.
            // await RefreshHomeElementsAsync();
        }
        else
        {
            // Consider reading the content of the response even if the status code is not successful.
            var errorContent = await subCatToAddRes1.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to add new sub-category. Error: " + errorContent);
        }
    }


    public void AddTransOverlay()
    {
        openTransactionOverlay = !openTransactionOverlay;
        isSubCategoryAddOverlayOpen = false;
    }

    public void generateRefresh(bool refresh)
    {
        doRefresh = refresh;
    }

    //get category to edit:
    public void showEditCategory()
    {
        editBtnClicked = !editBtnClicked;
        isOpetionsBtnClicked = false;
        deleteBtnClicked = false;
        closeOverlay.InvokeAsync(true);
        OpetionsBtnClicked();
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    public void deleteCategoryBtnClciked()
    {
        deleteBtnClicked = !deleteBtnClicked;
        isOpetionsBtnClicked = false;
        editBtnClicked = false;
        isOpetionsBtnClicked = false;
        OpetionsBtnClicked();

    }

    protected async Task deleteCategory()
    {
        var deleteRes = await Http.DeleteAsync("api/Present/deleteCategory/" + Category.id);
        if (deleteRes.IsSuccessStatusCode)
        {
            
            deleteCat.InvokeAsync(Category);
        }
        else
        {
            Console.WriteLine(" בעיה במחיקת קטגוריה");
        }
        deleteBtnClicked = false;
    }

    public async void updateTakenSubCatBudget(List<OverDraftBudgetToEdit> subNewBudget)
    {
        foreach (OverDraftBudgetToEdit budgetToUpdate in subNewBudget)
        {
            foreach (SubCategoryToShow subCatToUpdate in subCategories)
            {
                if (subCatToUpdate.id == budgetToUpdate.id)
                {
                    subCatToUpdate.monthlyPlannedBudget = budgetToUpdate.monthlyPlannedBudget;
                }
            }
        }

        await getSubCategories();
        var updatedGivingSubCatBudget = await Http.GetAsync("api/Transactions/updateGivingSubCat/" + subNewBudget[0].id);
        if (updatedGivingSubCatBudget.IsSuccessStatusCode)
        {
            double newBudget = await updatedGivingSubCatBudget.Content.ReadFromJsonAsync<double>();
            OverDraftBudgetToEdit givingSubCat = new OverDraftBudgetToEdit();
            givingSubCat.id = subNewBudget[0].id;
            givingSubCat.monthlyPlannedBudget = newBudget;
            givingSubCatBudget.InvokeAsync(givingSubCat);
        }

    }

    public void updateEditedSubCat(SubCategoryToEdit editedSubCat)
    {
        foreach (SubCategoryToShow subcategory in subCategories)
        {
            if (editedSubCat.categoryID != Category.id)
            {
                subCategories.Remove(subcategory);
            }
            else if (editedSubCat.id == subcategory.id)
            {
                subcategory.subCategoryTitle = editedSubCat.subCategoryTitle;

                if (!categoryTypeIndicator)
                {
                    double? tempBudget=0;
                    if (subcategory.monthlyPlannedBudget > editedSubCat.monthlyPlannedBudget)
                    {
                        tempBudget = (subcategory.monthlyPlannedBudget - editedSubCat.monthlyPlannedBudget)*-1;
                    }
                    else if (subcategory.monthlyPlannedBudget < editedSubCat.monthlyPlannedBudget)
                    {
                        tempBudget = (editedSubCat.monthlyPlannedBudget- subcategory.monthlyPlannedBudget);
                    }

                    subcategory.monthlyPlannedBudget = editedSubCat.monthlyPlannedBudget;
                    if (tempBudget!=null)
                    {
                        updateBudget.InvokeAsync(tempBudget);
                    }

                    //checking overdraft:
                    for (int i = 0; i < subCategories.Count; i++)
                    {
                        if (subCategories[i].id == editedSubCat.id)
                        {
                            if (editedSubCat.monthlyPlannedBudget.HasValue)
                            {
                                if (editedSubCat.monthlyPlannedBudget.Value < subCategories[i].transactionsValue)
                                {
                                    //alert overdraft pop up

                                    checkOverdraft(subCategories[i].id);
                                }
                            }
                        }
                    }
                }

            }
        }
    }

    public void deleteSubCat(int subCatIDtoRemove)
    {
        foreach (SubCategoryToShow subCat in subCategories)
        {
            if (subCat.id == subCatIDtoRemove)
            {
                subCategories.Remove(subCat);
            }
        }
    }

    public void closeDeletePopUp()
    {
        deleteBtnClicked = !deleteBtnClicked;
    }

    public async Task getSearchedSubCat()
    {
        subCategories = new List<SubCategoryToShow>();
        foreach (int sb in searchedSubCats)
        {
            var subCatRes = await Http.GetAsync("api/Present/GetSubCategory/" + sb);
            if (subCatRes.IsSuccessStatusCode)
            {
                SubCategoryToShow selectedSubCat = await subCatRes.Content.ReadFromJsonAsync<SubCategoryToShow>();


                subCategories.Add(selectedSubCat);

            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }

        makeSearchfuncAgain();
        isAccordionClick = true;
        subCatRefreshed = false;

    }

    void makeSearchfuncAgain()
    {
        isSubCatSearched.InvokeAsync(true);

    }

    void closeEditOverlay()
    {
        editBtnClicked = false;
        closeEdit.InvokeAsync(true);
    }

    void closeDeleteOverlay()
    {
        OpetionsBtnClicked();
        closeOverlay.InvokeAsync(true);

    }

    public void updateStreak(string? newStreakStat)
    {
        updatedStreakStat.InvokeAsync(newStreakStat);
    }

    private void SubCatTitleLengthCounter(ChangeEventArgs e)
    {
        titleInput = e.Value.ToString();
        titleInputLength = titleInput.Length;
    }
    //--------------------//
    List<OverBudgetToShow> closeOverdraftOpts = new List<OverBudgetToShow>();
    double currentGap = 0;
    OverBudgetToShow overDraftSubCategory = new OverBudgetToShow();

    public async Task checkOverdraft(int subCatID)
    {
        var getOverdraftDetails= await Http.GetAsync("api/Present/GetSubCategory/"+subCatID);
        if (getOverdraftDetails.IsSuccessStatusCode)
        {
            SubCategoryToShow tempSub = await getOverdraftDetails.Content.ReadFromJsonAsync<SubCategoryToShow>();
            if (tempSub != null)
            {
                overDraftSubCategory.id = subCatID;
                overDraftSubCategory.subCategoryTitle = tempSub.subCategoryTitle;

                overDraftSubCategory.remainingBudget = tempSub.transactionsValue;
                if (tempSub.monthlyPlannedBudget.HasValue)
                {
                    overDraftSubCategory.monthlyPlannedBudget = tempSub.monthlyPlannedBudget.Value;
                }
            }
        }
        
        var overdraftRes = await Http.GetAsync("api/Transactions/showOverdraft/" + subCatID + "/" + userID);
        if (overdraftRes.IsSuccessStatusCode)
        {
            overdraftDetected = true;
            overdraftOverlayOpen = true;
            closeOverdraftOpts = new List<OverBudgetToShow>();
            closeOverdraftOpts = await overdraftRes.Content.ReadFromJsonAsync<List<OverBudgetToShow>>();
            currentGap = (closeOverdraftOpts[closeOverdraftOpts.Count - 1].remainingBudget) - (closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget);

            overDraftSubCategory.id = closeOverdraftOpts[closeOverdraftOpts.Count - 1].id;
            overDraftSubCategory.monthlyPlannedBudget = closeOverdraftOpts[closeOverdraftOpts.Count - 1].monthlyPlannedBudget;
            chosenSubCategory = new OverBudgetToShow();
        }
        else
        {
            Console.WriteLine("No overdraft detected");

        }
    }

    private void HandleChange(OverBudgetToShow chosenSubCat)
    {
        /*var selectedTitle = e.Value.ToString()*/

        chosenSubCategory = chosenSubCat;
        openSubCatsOptions = !openSubCatsOptions;
    }

    List<OverDraftBudgetToEdit> budgetToUpdate = new List<OverDraftBudgetToEdit>();
    public async Task manageBudgetsToTranfer()
    {
        budgetToUpdate = new List<OverDraftBudgetToEdit>();

        budgetToUpdate.Add(new OverDraftBudgetToEdit
            {
                id = chosenSubCategory.id,  // ID of chosen subcategory
                monthlyPlannedBudget = chosenSubCategory.monthlyPlannedBudget - currentGap // Updated budget

            });


        budgetToUpdate.Add(new OverDraftBudgetToEdit
            {
                id = overDraftSubCategory.id, // ID of the overdraft subcategory
                monthlyPlannedBudget = overDraftSubCategory.monthlyPlannedBudget + currentGap // Updated budget
            });

        await updateSubCategoryBudget(budgetToUpdate);

    }

    public async Task updateSubCategoryBudget(List<OverDraftBudgetToEdit> budgetsToUpdate)
    {

        var budgetToSaveRes = await Http.PostAsJsonAsync("api/Transactions/EditSubCategoriesNewBudgets", budgetsToUpdate);
        if (budgetToSaveRes.IsSuccessStatusCode)
        {
            Console.WriteLine("התקציבים עודכנו בהצלחה :)");

            overdraftDetected = false;
            overdraftNotTreated = false;

            foreach (SubCategoryToShow sub in subCategories)
            {
                if (sub.id == budgetsToUpdate[1].id)
                {
                    sub.monthlyPlannedBudget = budgetsToUpdate[1].monthlyPlannedBudget;
                }
                if (sub.id == budgetsToUpdate[0].id)
                {
                    sub.monthlyPlannedBudget = budgetsToUpdate[0].monthlyPlannedBudget;

                }
            }
            await accordionControl();

        }
        else
        {
            Console.WriteLine("עדכון התקציבים נכשל");
        }
    }

    public void NotTreatedOverdraft()
    {
        overdraftDetected=false;
        overdraftNotTreated=true;
    }

    public void updateTransSumInStatTable(double trans)
    {
        updateTransSum.InvokeAsync(trans);
    }
}